
LightsaberFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038dc  080038dc  000048dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080038f4  080038f4  000048f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038fc  080038fc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038fc  080038fc  000048fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003904  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08003910  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003910  000050e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac98  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca4  00000000  00000000  0000fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00011978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b5  00000000  00000000  000124c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002107f  00000000  00000000  00012d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d031  00000000  00000000  00033df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc34e  00000000  00000000  00040e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f04  00000000  00000000  0010d1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001100bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080038c4 	.word	0x080038c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080038c4 	.word	0x080038c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f002 fadc 	bl	8002abc <HAL_TIM_PWM_Stop_DMA>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	f5ad 6d3d 	sub.w	sp, sp, #3024	@ 0xbd0
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fb70 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f882 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f99e 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 8000520:	f000 f97c 	bl	800081c <MX_DMA_Init>
  MX_DAC_Init();
 8000524:	f000 f8dc 	bl	80006e0 <MX_DAC_Init>
  MX_TIM2_Init();
 8000528:	f000 f904 	bl	8000734 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int nextLightTime = 16000;
 800052c:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8000530:	f8c7 3bcc 	str.w	r3, [r7, #3020]	@ 0xbcc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int lightTime = TIM2 -> CNT;
 8000534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800053a:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc
	  if (lightTime >= nextLightTime) {
 800053e:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8000542:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 8000546:	429a      	cmp	r2, r3
 8000548:	dbf4      	blt.n	8000534 <main+0x28>
		  nextLightTime = lightTime + 16000;
 800054a:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 800054e:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 8000552:	f8c7 3bcc 	str.w	r3, [r7, #3020]	@ 0xbcc
		  for (int i = 0; i < NUM_PIXELS; i++) {
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3bc8 	str.w	r3, [r7, #3016]	@ 0xbc8
 800055c:	e01f      	b.n	800059e <main+0x92>
			  pixels[i].color.g = 50;
 800055e:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	f503 633d 	add.w	r3, r3, #3024	@ 0xbd0
 8000568:	443b      	add	r3, r7
 800056a:	2232      	movs	r2, #50	@ 0x32
 800056c:	f803 2c8c 	strb.w	r2, [r3, #-140]
			  pixels[i].color.r = 0;
 8000570:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	f503 633d 	add.w	r3, r3, #3024	@ 0xbd0
 800057a:	443b      	add	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	f803 2c8b 	strb.w	r2, [r3, #-139]
			  pixels[i].color.b = 0;
 8000582:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	f503 633d 	add.w	r3, r3, #3024	@ 0xbd0
 800058c:	443b      	add	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	f803 2c8a 	strb.w	r2, [r3, #-138]
		  for (int i = 0; i < NUM_PIXELS; i++) {
 8000594:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8000598:	3301      	adds	r3, #1
 800059a:	f8c7 3bc8 	str.w	r3, [r7, #3016]	@ 0xbc8
 800059e:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 80005a2:	2b1d      	cmp	r3, #29
 80005a4:	dddb      	ble.n	800055e <main+0x52>
		  }

		  for (int i = 0; i < NUM_PIXELS; i++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3bc4 	str.w	r3, [r7, #3012]	@ 0xbc4
 80005ac:	e029      	b.n	8000602 <main+0xf6>
			  for (int j = 0; j < 24; j++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 3bc0 	str.w	r3, [r7, #3008]	@ 0xbc0
 80005b4:	e01c      	b.n	80005f0 <main+0xe4>
				  dmaBuff[i] = ((pixels[i].data) >> (23 - j)) & 0x01;
 80005b6:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	f503 633d 	add.w	r3, r3, #3024	@ 0xbd0
 80005c0:	443b      	add	r3, r7
 80005c2:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 80005c6:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 80005ca:	f1c3 0317 	rsb	r3, r3, #23
 80005ce:	fa22 f303 	lsr.w	r3, r2, r3
 80005d2:	f003 0101 	and.w	r1, r3, #1
 80005d6:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 80005da:	f5a3 633d 	sub.w	r3, r3, #3024	@ 0xbd0
 80005de:	f8d7 2bc4 	ldr.w	r2, [r7, #3012]	@ 0xbc4
 80005e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  for (int j = 0; j < 24; j++) {
 80005e6:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 80005ea:	3301      	adds	r3, #1
 80005ec:	f8c7 3bc0 	str.w	r3, [r7, #3008]	@ 0xbc0
 80005f0:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 80005f4:	2b17      	cmp	r3, #23
 80005f6:	ddde      	ble.n	80005b6 <main+0xaa>
		  for (int i = 0; i < NUM_PIXELS; i++) {
 80005f8:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 80005fc:	3301      	adds	r3, #1
 80005fe:	f8c7 3bc4 	str.w	r3, [r7, #3012]	@ 0xbc4
 8000602:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 8000606:	2b1d      	cmp	r3, #29
 8000608:	ddd1      	ble.n	80005ae <main+0xa2>
			  }
		  }
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, dmaBuff, DMA_BUFF_SIZE);
 800060a:	463a      	mov	r2, r7
 800060c:	f240 23d1 	movw	r3, #721	@ 0x2d1
 8000610:	2100      	movs	r1, #0
 8000612:	4802      	ldr	r0, [pc, #8]	@ (800061c <main+0x110>)
 8000614:	f002 f88a 	bl	800272c <HAL_TIM_PWM_Start_DMA>
  {
 8000618:	e78c      	b.n	8000534 <main+0x28>
 800061a:	bf00      	nop
 800061c:	2000003c 	.word	0x2000003c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 f91c 	bl	800386c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <SystemClock_Config+0xbc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fd03 	bl	80020a0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f938 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f9d8 	bl	8001a74 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 f923 	bl	8000914 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_DAC_Init+0x4c>)
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <MX_DAC_Init+0x50>)
 80006f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_DAC_Init+0x4c>)
 80006f6:	f000 fc02 	bl	8000efe <HAL_DAC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000700:	f000 f908 	bl	8000914 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_DAC_Init+0x4c>)
 8000714:	f000 fc15 	bl	8000f42 <HAL_DAC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800071e:	f000 f8f9 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	40007400 	.word	0x40007400

08000734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	@ 0x38
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000764:	4b2c      	ldr	r3, [pc, #176]	@ (8000818 <MX_TIM2_Init+0xe4>)
 8000766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800076c:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <MX_TIM2_Init+0xe4>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <MX_TIM2_Init+0xe4>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_TIM2_Init+0xe4>)
 800077a:	2213      	movs	r2, #19
 800077c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <MX_TIM2_Init+0xe4>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_TIM2_Init+0xe4>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800078a:	4823      	ldr	r0, [pc, #140]	@ (8000818 <MX_TIM2_Init+0xe4>)
 800078c:	f001 ff26 	bl	80025dc <HAL_TIM_Base_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000796:	f000 f8bd 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a4:	4619      	mov	r1, r3
 80007a6:	481c      	ldr	r0, [pc, #112]	@ (8000818 <MX_TIM2_Init+0xe4>)
 80007a8:	f002 fb1c 	bl	8002de4 <HAL_TIM_ConfigClockSource>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007b2:	f000 f8af 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b6:	4818      	ldr	r0, [pc, #96]	@ (8000818 <MX_TIM2_Init+0xe4>)
 80007b8:	f001 ff5f 	bl	800267a <HAL_TIM_PWM_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007c2:	f000 f8a7 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	4619      	mov	r1, r3
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <MX_TIM2_Init+0xe4>)
 80007d6:	f002 ffcd 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007e0:	f000 f898 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e4:	2360      	movs	r3, #96	@ 0x60
 80007e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	@ (8000818 <MX_TIM2_Init+0xe4>)
 80007fc:	f002 fa30 	bl	8002c60 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000806:	f000 f885 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <MX_TIM2_Init+0xe4>)
 800080c:	f000 f946 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 8000810:	bf00      	nop
 8000812:	3738      	adds	r7, #56	@ 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000003c 	.word	0x2000003c

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <MX_DMA_Init+0x3c>)
 800082c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2010      	movs	r0, #16
 8000844:	f000 fb25 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000848:	2010      	movs	r0, #16
 800084a:	f000 fb3e 	bl	8000eca <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <MX_GPIO_Init+0xb0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a24      	ldr	r2, [pc, #144]	@ (800090c <MX_GPIO_Init+0xb0>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_GPIO_Init+0xb0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_GPIO_Init+0xb0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a1d      	ldr	r2, [pc, #116]	@ (800090c <MX_GPIO_Init+0xb0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_GPIO_Init+0xb0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_GPIO_Init+0xb0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a16      	ldr	r2, [pc, #88]	@ (800090c <MX_GPIO_Init+0xb0>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_GPIO_Init+0xb0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_GPIO_Init+0xb4>)
 80008cc:	f001 f8b8 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80008d0:	2307      	movs	r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	480b      	ldr	r0, [pc, #44]	@ (8000910 <MX_GPIO_Init+0xb4>)
 80008e4:	f000 ff18 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e8:	2308      	movs	r3, #8
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_GPIO_Init+0xb4>)
 8000900:	f000 ff0a 	bl	8001718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_DAC_MspInit+0x7c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d127      	bne.n	80009e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_DAC_MspInit+0x80>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a15      	ldr	r2, [pc, #84]	@ (80009f0 <HAL_DAC_MspInit+0x80>)
 800099c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <HAL_DAC_MspInit+0x80>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_DAC_MspInit+0x80>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <HAL_DAC_MspInit+0x80>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_DAC_MspInit+0x80>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ca:	2310      	movs	r3, #16
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_DAC_MspInit+0x84>)
 80009de:	f000 fe9b 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40007400 	.word	0x40007400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a08:	d13e      	bne.n	8000a88 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_TIM_Base_MspInit+0x98>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <HAL_TIM_Base_MspInit+0x98>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_TIM_Base_MspInit+0x98>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <HAL_TIM_Base_MspInit+0xa0>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a2e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000a32:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a46:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a4e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a56:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a64:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a6c:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a6e:	f000 fac1 	bl	8000ff4 <HAL_DMA_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000a78:	f7ff ff4c 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a82:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_TIM_Base_MspInit+0x9c>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	20000084 	.word	0x20000084
 8000a98:	40026088 	.word	0x40026088

08000a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000abc:	d11d      	bne.n	8000afa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ada:	2320      	movs	r3, #32
 8000adc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <HAL_TIM_MspPostInit+0x6c>)
 8000af6:	f000 fe0f 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 f89b 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <DMA1_Stream5_IRQHandler+0x10>)
 8000b72:	f000 fb67 	bl	8001244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000084 	.word	0x20000084

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba8:	f7ff ffea 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 fe53 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc99 	bl	800050c <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be8:	08003904 	.word	0x08003904
  ldr r2, =_sbss
 8000bec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf0:	200000e8 	.word	0x200000e8

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f92b 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fe78 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f943 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c78:	f000 f90b 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	@ (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200000e4 	.word	0x200000e4

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200000e4 	.word	0x200000e4

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff29 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff3e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff31 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa2 	bl	8000e38 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e014      	b.n	8000f3a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d105      	bne.n	8000f26 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fd25 	bl	8000970 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2202      	movs	r2, #2
 8000f2a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b089      	sub	sp, #36	@ 0x24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_DAC_ConfigChannel+0x1c>
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e042      	b.n	8000fe8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	795b      	ldrb	r3, [r3, #5]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_DAC_ConfigChannel+0x2c>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e03c      	b.n	8000fe8 <HAL_DAC_ConfigChannel+0xa6>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2201      	movs	r2, #1
 8000f72:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2202      	movs	r2, #2
 8000f78:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	22c0      	movs	r2, #192	@ 0xc0
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43da      	mvns	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3724      	adds	r7, #36	@ 0x24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fe60 	bl	8000cc4 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e099      	b.n	8001144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001030:	e00f      	b.n	8001052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001032:	f7ff fe47 	bl	8000cc4 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b05      	cmp	r3, #5
 800103e:	d908      	bls.n	8001052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2220      	movs	r2, #32
 8001044:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2203      	movs	r2, #3
 800104a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e078      	b.n	8001144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e8      	bne.n	8001032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <HAL_DMA_Init+0x158>)
 800106c:	4013      	ands	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800107e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d107      	bne.n	80010bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	4313      	orrs	r3, r2
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f023 0307 	bic.w	r3, r3, #7
 80010d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	4313      	orrs	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d117      	bne.n	8001116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00e      	beq.n	8001116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fa91 	bl	8001620 <DMA_CheckFifoParam>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2240      	movs	r2, #64	@ 0x40
 8001108:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001112:	2301      	movs	r3, #1
 8001114:	e016      	b.n	8001144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fa48 	bl	80015b4 <DMA_CalcBaseAndBitshift>
 8001124:	4603      	mov	r3, r0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800112c:	223f      	movs	r2, #63	@ 0x3f
 800112e:	409a      	lsls	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	f010803f 	.word	0xf010803f

08001150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_DMA_Start_IT+0x26>
 8001172:	2302      	movs	r3, #2
 8001174:	e040      	b.n	80011f8 <HAL_DMA_Start_IT+0xa8>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d12f      	bne.n	80011ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2202      	movs	r2, #2
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f9da 	bl	8001558 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a8:	223f      	movs	r2, #63	@ 0x3f
 80011aa:	409a      	lsls	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0216 	orr.w	r2, r2, #22
 80011be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0208 	orr.w	r2, r2, #8
 80011d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e005      	b.n	80011f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011f2:	2302      	movs	r3, #2
 80011f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d004      	beq.n	800121e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2280      	movs	r2, #128	@ 0x80
 8001218:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00c      	b.n	8001238 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2205      	movs	r2, #5
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001250:	4b8e      	ldr	r3, [pc, #568]	@ (800148c <HAL_DMA_IRQHandler+0x248>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a8e      	ldr	r2, [pc, #568]	@ (8001490 <HAL_DMA_IRQHandler+0x24c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0a9b      	lsrs	r3, r3, #10
 800125c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126e:	2208      	movs	r2, #8
 8001270:	409a      	lsls	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0204 	bic.w	r2, r2, #4
 8001296:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129c:	2208      	movs	r2, #8
 800129e:	409a      	lsls	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b4:	2201      	movs	r2, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d012      	beq.n	80012e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012de:	f043 0202 	orr.w	r2, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ea:	2204      	movs	r2, #4
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d012      	beq.n	800131c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001308:	2204      	movs	r2, #4
 800130a:	409a      	lsls	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001314:	f043 0204 	orr.w	r2, r3, #4
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001320:	2210      	movs	r2, #16
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d043      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03c      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	2210      	movs	r2, #16
 8001340:	409a      	lsls	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d018      	beq.n	8001386 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d024      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
 8001372:	e01f      	b.n	80013b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001378:	2b00      	cmp	r3, #0
 800137a:	d01b      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4798      	blx	r3
 8001384:	e016      	b.n	80013b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d107      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0208 	bic.w	r2, r2, #8
 80013a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b8:	2220      	movs	r2, #32
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 808f 	beq.w	80014e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8087 	beq.w	80014e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013da:	2220      	movs	r2, #32
 80013dc:	409a      	lsls	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d136      	bne.n	800145c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0216 	bic.w	r2, r2, #22
 80013fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800140c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <HAL_DMA_IRQHandler+0x1da>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0208 	bic.w	r2, r2, #8
 800142c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001432:	223f      	movs	r2, #63	@ 0x3f
 8001434:	409a      	lsls	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144e:	2b00      	cmp	r3, #0
 8001450:	d07e      	beq.n	8001550 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
        }
        return;
 800145a:	e079      	b.n	8001550 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01d      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10d      	bne.n	8001494 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147c:	2b00      	cmp	r3, #0
 800147e:	d031      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
 8001488:	e02c      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d023      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
 80014a4:	e01e      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10f      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0210 	bic.w	r2, r2, #16
 80014c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d032      	beq.n	8001552 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d022      	beq.n	800153e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2205      	movs	r2, #5
 80014fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3301      	adds	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	d307      	bcc.n	800152c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f2      	bne.n	8001510 <HAL_DMA_IRQHandler+0x2cc>
 800152a:	e000      	b.n	800152e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800152c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
 800154e:	e000      	b.n	8001552 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001550:	bf00      	nop
    }
  }
}
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001574:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b40      	cmp	r3, #64	@ 0x40
 8001584:	d108      	bne.n	8001598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001596:	e007      	b.n	80015a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3b10      	subs	r3, #16
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <DMA_CalcBaseAndBitshift+0x64>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <DMA_CalcBaseAndBitshift+0x68>)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d909      	bls.n	80015f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	1d1a      	adds	r2, r3, #4
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80015f4:	e007      	b.n	8001606 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	aaaaaaab 	.word	0xaaaaaaab
 800161c:	080038ec 	.word	0x080038ec

08001620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11f      	bne.n	800167a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d856      	bhi.n	80016ee <DMA_CheckFifoParam+0xce>
 8001640:	a201      	add	r2, pc, #4	@ (adr r2, 8001648 <DMA_CheckFifoParam+0x28>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001659 	.word	0x08001659
 800164c:	0800166b 	.word	0x0800166b
 8001650:	08001659 	.word	0x08001659
 8001654:	080016ef 	.word	0x080016ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d046      	beq.n	80016f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001668:	e043      	b.n	80016f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001672:	d140      	bne.n	80016f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001678:	e03d      	b.n	80016f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001682:	d121      	bne.n	80016c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d837      	bhi.n	80016fa <DMA_CheckFifoParam+0xda>
 800168a:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <DMA_CheckFifoParam+0x70>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a7 	.word	0x080016a7
 8001698:	080016a1 	.word	0x080016a1
 800169c:	080016b9 	.word	0x080016b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      break;
 80016a4:	e030      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d025      	beq.n	80016fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b6:	e022      	b.n	80016fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016c0:	d11f      	bne.n	8001702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016c6:	e01c      	b.n	8001702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d903      	bls.n	80016d6 <DMA_CheckFifoParam+0xb6>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d003      	beq.n	80016dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016d4:	e018      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
      break;
 80016da:	e015      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00e      	beq.n	8001706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
      break;
 80016ec:	e00b      	b.n	8001706 <DMA_CheckFifoParam+0xe6>
      break;
 80016ee:	bf00      	nop
 80016f0:	e00a      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e008      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016f6:	bf00      	nop
 80016f8:	e006      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
 80016fc:	e004      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016fe:	bf00      	nop
 8001700:	e002      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;   
 8001702:	bf00      	nop
 8001704:	e000      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 8001706:	bf00      	nop
    }
  } 
  
  return status; 
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e165      	b.n	8001a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 8154 	bne.w	80019fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	2b02      	cmp	r3, #2
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80ae 	beq.w	80019fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a18 <HAL_GPIO_Init+0x300>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001a18 <HAL_GPIO_Init+0x300>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001a18 <HAL_GPIO_Init+0x300>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ba:	4a58      	ldr	r2, [pc, #352]	@ (8001a1c <HAL_GPIO_Init+0x304>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001a20 <HAL_GPIO_Init+0x308>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a24 <HAL_GPIO_Init+0x30c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x216>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a28 <HAL_GPIO_Init+0x310>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x212>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	@ (8001a2c <HAL_GPIO_Init+0x314>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4b      	ldr	r2, [pc, #300]	@ (8001a30 <HAL_GPIO_Init+0x318>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x20a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <HAL_GPIO_Init+0x31c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x206>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a49      	ldr	r2, [pc, #292]	@ (8001a38 <HAL_GPIO_Init+0x320>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x202>
 8001916:	2306      	movs	r3, #6
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800191a:	2307      	movs	r3, #7
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 8001932:	2300      	movs	r3, #0
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001944:	4935      	ldr	r1, [pc, #212]	@ (8001a1c <HAL_GPIO_Init+0x304>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001952:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001976:	4a31      	ldr	r2, [pc, #196]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a0:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a6:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ca:	4a1c      	ldr	r2, [pc, #112]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	f67f ae96 	bls.w	8001734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b68      	ldr	r3, [pc, #416]	@ (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d90c      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b65      	ldr	r3, [pc, #404]	@ (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	@ (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a58      	ldr	r2, [pc, #352]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d044      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b3f      	ldr	r3, [pc, #252]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3b      	ldr	r3, [pc, #236]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e067      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4934      	ldr	r1, [pc, #208]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f8ae 	bl	8000cc4 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff f8aa 	bl	8000cc4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20c      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	@ (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f80e 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	080038dc 	.word	0x080038dc
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b0ae      	sub	sp, #184	@ 0xb8
 8001c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c66:	4bcb      	ldr	r3, [pc, #812]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	f200 8206 	bhi.w	8002080 <HAL_RCC_GetSysClockFreq+0x440>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001cb1 	.word	0x08001cb1
 8001c80:	08002081 	.word	0x08002081
 8001c84:	08002081 	.word	0x08002081
 8001c88:	08002081 	.word	0x08002081
 8001c8c:	08001cb9 	.word	0x08001cb9
 8001c90:	08002081 	.word	0x08002081
 8001c94:	08002081 	.word	0x08002081
 8001c98:	08002081 	.word	0x08002081
 8001c9c:	08001cc1 	.word	0x08001cc1
 8001ca0:	08002081 	.word	0x08002081
 8001ca4:	08002081 	.word	0x08002081
 8001ca8:	08002081 	.word	0x08002081
 8001cac:	08001eb1 	.word	0x08001eb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001cb6:	e1e7      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb8:	4bb8      	ldr	r3, [pc, #736]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cbe:	e1e3      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d071      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4bae      	ldr	r3, [pc, #696]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ce4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001cfe:	4622      	mov	r2, r4
 8001d00:	462b      	mov	r3, r5
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	f04f 0100 	mov.w	r1, #0
 8001d0a:	0159      	lsls	r1, r3, #5
 8001d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d10:	0150      	lsls	r0, r2, #5
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4621      	mov	r1, r4
 8001d18:	1a51      	subs	r1, r2, r1
 8001d1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d30:	4649      	mov	r1, r9
 8001d32:	018b      	lsls	r3, r1, #6
 8001d34:	4641      	mov	r1, r8
 8001d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	018a      	lsls	r2, r1, #6
 8001d3e:	4641      	mov	r1, r8
 8001d40:	1a51      	subs	r1, r2, r1
 8001d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d44:	4649      	mov	r1, r9
 8001d46:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d58:	4649      	mov	r1, r9
 8001d5a:	00cb      	lsls	r3, r1, #3
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d62:	4641      	mov	r1, r8
 8001d64:	00ca      	lsls	r2, r1, #3
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d72:	462b      	mov	r3, r5
 8001d74:	460a      	mov	r2, r1
 8001d76:	eb42 0303 	adc.w	r3, r2, r3
 8001d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d88:	4629      	mov	r1, r5
 8001d8a:	024b      	lsls	r3, r1, #9
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d92:	4621      	mov	r1, r4
 8001d94:	024a      	lsls	r2, r1, #9
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001da4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001dac:	f7fe fa2a 	bl	8000204 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dba:	e067      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbc:	4b75      	ldr	r3, [pc, #468]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001dda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001dde:	4622      	mov	r2, r4
 8001de0:	462b      	mov	r3, r5
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	0159      	lsls	r1, r3, #5
 8001dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df0:	0150      	lsls	r0, r2, #5
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4621      	mov	r1, r4
 8001df8:	1a51      	subs	r1, r2, r1
 8001dfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e10:	4649      	mov	r1, r9
 8001e12:	018b      	lsls	r3, r1, #6
 8001e14:	4641      	mov	r1, r8
 8001e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	018a      	lsls	r2, r1, #6
 8001e1e:	4641      	mov	r1, r8
 8001e20:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e24:	4649      	mov	r1, r9
 8001e26:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e3e:	4692      	mov	sl, r2
 8001e40:	469b      	mov	fp, r3
 8001e42:	4623      	mov	r3, r4
 8001e44:	eb1a 0303 	adds.w	r3, sl, r3
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	462b      	mov	r3, r5
 8001e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e5e:	4629      	mov	r1, r5
 8001e60:	028b      	lsls	r3, r1, #10
 8001e62:	4621      	mov	r1, r4
 8001e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e68:	4621      	mov	r1, r4
 8001e6a:	028a      	lsls	r2, r1, #10
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e74:	2200      	movs	r2, #0
 8001e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e78:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e7e:	f7fe f9c1 	bl	8000204 <__aeabi_uldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4613      	mov	r3, r2
 8001e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e8c:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eae:	e0eb      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ebc:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d06b      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec8:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	2200      	movs	r2, #0
 8001ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8001edc:	2300      	movs	r3, #0
 8001ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ee0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0159      	lsls	r1, r3, #5
 8001ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef6:	0150      	lsls	r0, r2, #5
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4621      	mov	r1, r4
 8001efe:	1a51      	subs	r1, r2, r1
 8001f00:	61b9      	str	r1, [r7, #24]
 8001f02:	4629      	mov	r1, r5
 8001f04:	eb63 0301 	sbc.w	r3, r3, r1
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f16:	4659      	mov	r1, fp
 8001f18:	018b      	lsls	r3, r1, #6
 8001f1a:	4651      	mov	r1, sl
 8001f1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f20:	4651      	mov	r1, sl
 8001f22:	018a      	lsls	r2, r1, #6
 8001f24:	4651      	mov	r1, sl
 8001f26:	ebb2 0801 	subs.w	r8, r2, r1
 8001f2a:	4659      	mov	r1, fp
 8001f2c:	eb63 0901 	sbc.w	r9, r3, r1
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f44:	4690      	mov	r8, r2
 8001f46:	4699      	mov	r9, r3
 8001f48:	4623      	mov	r3, r4
 8001f4a:	eb18 0303 	adds.w	r3, r8, r3
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	462b      	mov	r3, r5
 8001f52:	eb49 0303 	adc.w	r3, r9, r3
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f64:	4629      	mov	r1, r5
 8001f66:	024b      	lsls	r3, r1, #9
 8001f68:	4621      	mov	r1, r4
 8001f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f6e:	4621      	mov	r1, r4
 8001f70:	024a      	lsls	r2, r1, #9
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f84:	f7fe f93e 	bl	8000204 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f92:	e065      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x420>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	4611      	mov	r1, r2
 8001fac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001fba:	4642      	mov	r2, r8
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0159      	lsls	r1, r3, #5
 8001fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fcc:	0150      	lsls	r0, r2, #5
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4641      	mov	r1, r8
 8001fd4:	1a51      	subs	r1, r2, r1
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	4649      	mov	r1, r9
 8001fda:	eb63 0301 	sbc.w	r3, r3, r1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001fec:	4659      	mov	r1, fp
 8001fee:	018b      	lsls	r3, r1, #6
 8001ff0:	4651      	mov	r1, sl
 8001ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	018a      	lsls	r2, r1, #6
 8001ffa:	4651      	mov	r1, sl
 8001ffc:	1a54      	subs	r4, r2, r1
 8001ffe:	4659      	mov	r1, fp
 8002000:	eb63 0501 	sbc.w	r5, r3, r1
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	00eb      	lsls	r3, r5, #3
 800200e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002012:	00e2      	lsls	r2, r4, #3
 8002014:	4614      	mov	r4, r2
 8002016:	461d      	mov	r5, r3
 8002018:	4643      	mov	r3, r8
 800201a:	18e3      	adds	r3, r4, r3
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	464b      	mov	r3, r9
 8002020:	eb45 0303 	adc.w	r3, r5, r3
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002032:	4629      	mov	r1, r5
 8002034:	028b      	lsls	r3, r1, #10
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800203c:	4621      	mov	r1, r4
 800203e:	028a      	lsls	r2, r1, #10
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002048:	2200      	movs	r2, #0
 800204a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800204c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800204e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002052:	f7fe f8d7 	bl	8000204 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4613      	mov	r3, r2
 800205c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x458>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	0f1b      	lsrs	r3, r3, #28
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800206e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800207e:	e003      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800208c:	4618      	mov	r0, r3
 800208e:	37b8      	adds	r7, #184	@ 0xb8
 8002090:	46bd      	mov	sp, r7
 8002092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	00f42400 	.word	0x00f42400

080020a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e28d      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8083 	beq.w	80021c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020c0:	4b94      	ldr	r3, [pc, #592]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d019      	beq.n	8002100 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020cc:	4b91      	ldr	r3, [pc, #580]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020e4:	d00c      	beq.n	8002100 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d112      	bne.n	8002118 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f2:	4b88      	ldr	r3, [pc, #544]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4b84      	ldr	r3, [pc, #528]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05b      	beq.n	80021c4 <HAL_RCC_OscConfig+0x124>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d157      	bne.n	80021c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e25a      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002120:	d106      	bne.n	8002130 <HAL_RCC_OscConfig+0x90>
 8002122:	4b7c      	ldr	r3, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7b      	ldr	r2, [pc, #492]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xcc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0xb4>
 800213a:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a75      	ldr	r2, [pc, #468]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b73      	ldr	r3, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a72      	ldr	r2, [pc, #456]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xcc>
 8002154:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6b      	ldr	r2, [pc, #428]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800216a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fda6 	bl	8000cc4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217c:	f7fe fda2 	bl	8000cc4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	@ 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e21f      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b61      	ldr	r3, [pc, #388]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xdc>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fd92 	bl	8000cc4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe fd8e 	bl	8000cc4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e20b      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b57      	ldr	r3, [pc, #348]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x104>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06f      	beq.n	80022b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d017      	beq.n	800220e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021de:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d105      	bne.n	80021f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f6:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002202:	4b44      	ldr	r3, [pc, #272]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x186>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1d3      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4937      	ldr	r1, [pc, #220]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCC_OscConfig+0x278>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe fd3b 	bl	8000cc4 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe fd37 	bl	8000cc4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1b4      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b28      	ldr	r3, [pc, #160]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4925      	ldr	r1, [pc, #148]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <HAL_RCC_OscConfig+0x278>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fd1a 	bl	8000cc4 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe fd16 	bl	8000cc4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e193      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d036      	beq.n	800232c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d016      	beq.n	80022f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_RCC_OscConfig+0x27c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7fe fcfa 	bl	8000cc4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe fcf6 	bl	8000cc4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e173      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80022e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x234>
 80022f2:	e01b      	b.n	800232c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_RCC_OscConfig+0x27c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe fce3 	bl	8000cc4 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	e00e      	b.n	8002320 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002302:	f7fe fcdf 	bl	8000cc4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d907      	bls.n	8002320 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e15c      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
 8002314:	40023800 	.word	0x40023800
 8002318:	42470000 	.word	0x42470000
 800231c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	4b8a      	ldr	r3, [pc, #552]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ea      	bne.n	8002302 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8097 	beq.w	8002468 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b83      	ldr	r3, [pc, #524]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10f      	bne.n	800236a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	4b7f      	ldr	r3, [pc, #508]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	4a7e      	ldr	r2, [pc, #504]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	@ 0x40
 800235a:	4b7c      	ldr	r3, [pc, #496]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b79      	ldr	r3, [pc, #484]	@ (8002550 <HAL_RCC_OscConfig+0x4b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <HAL_RCC_OscConfig+0x4b0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	@ (8002550 <HAL_RCC_OscConfig+0x4b0>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7fe fc9f 	bl	8000cc4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe fc9b 	bl	8000cc4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e118      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b6c      	ldr	r3, [pc, #432]	@ (8002550 <HAL_RCC_OscConfig+0x4b0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x31e>
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	4a65      	ldr	r2, [pc, #404]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80023bc:	e01c      	b.n	80023f8 <HAL_RCC_OscConfig+0x358>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x340>
 80023c6:	4b61      	ldr	r3, [pc, #388]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ca:	4a60      	ldr	r2, [pc, #384]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d2:	4b5e      	ldr	r3, [pc, #376]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d6:	4a5d      	ldr	r2, [pc, #372]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0x358>
 80023e0:	4b5a      	ldr	r3, [pc, #360]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	4a59      	ldr	r2, [pc, #356]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ec:	4b57      	ldr	r3, [pc, #348]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f0:	4a56      	ldr	r2, [pc, #344]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80023f2:	f023 0304 	bic.w	r3, r3, #4
 80023f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fc60 	bl	8000cc4 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fc5c 	bl	8000cc4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0d7      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	4b4b      	ldr	r3, [pc, #300]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ee      	beq.n	8002408 <HAL_RCC_OscConfig+0x368>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fc4a 	bl	8000cc4 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fc46 	bl	8000cc4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0c1      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244a:	4b40      	ldr	r3, [pc, #256]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ee      	bne.n	8002434 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002456:	7dfb      	ldrb	r3, [r7, #23]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80ad 	beq.w	80025cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002472:	4b36      	ldr	r3, [pc, #216]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b08      	cmp	r3, #8
 800247c:	d060      	beq.n	8002540 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d145      	bne.n	8002512 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <HAL_RCC_OscConfig+0x4b4>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fc1a 	bl	8000cc4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe fc16 	bl	8000cc4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e093      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	4b29      	ldr	r3, [pc, #164]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	019b      	lsls	r3, r3, #6
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	085b      	lsrs	r3, r3, #1
 80024ca:	3b01      	subs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	071b      	lsls	r3, r3, #28
 80024de:	491b      	ldr	r1, [pc, #108]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_RCC_OscConfig+0x4b4>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fbeb 	bl	8000cc4 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fbe7 	bl	8000cc4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e064      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x452>
 8002510:	e05c      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <HAL_RCC_OscConfig+0x4b4>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fbd4 	bl	8000cc4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fbd0 	bl	8000cc4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e04d      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_OscConfig+0x4ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x480>
 800253e:	e045      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e040      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000
 8002554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002558:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <HAL_RCC_OscConfig+0x538>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d030      	beq.n	80025c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d129      	bne.n	80025c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d122      	bne.n	80025c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800258e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	4293      	cmp	r3, r2
 8002592:	d119      	bne.n	80025c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d10f      	bne.n	80025c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e041      	b.n	8002672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f9f8 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fd8e 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e041      	b.n	8002710 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f839 	bl	8002718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 fd3f 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e022      	b.n	800279e <HAL_TIM_PWM_Start_DMA+0x72>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d109      	bne.n	8002772 <HAL_TIM_PWM_Start_DMA+0x46>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	e015      	b.n	800279e <HAL_TIM_PWM_Start_DMA+0x72>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d109      	bne.n	800278c <HAL_TIM_PWM_Start_DMA+0x60>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e008      	b.n	800279e <HAL_TIM_PWM_Start_DMA+0x72>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	e171      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_TIM_PWM_Start_DMA+0x94>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e022      	b.n	8002806 <HAL_TIM_PWM_Start_DMA+0xda>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d109      	bne.n	80027da <HAL_TIM_PWM_Start_DMA+0xae>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	e015      	b.n	8002806 <HAL_TIM_PWM_Start_DMA+0xda>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d109      	bne.n	80027f4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e008      	b.n	8002806 <HAL_TIM_PWM_Start_DMA+0xda>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d024      	beq.n	8002854 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_TIM_PWM_Start_DMA+0xea>
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e137      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002828:	e016      	b.n	8002858 <HAL_TIM_PWM_Start_DMA+0x12c>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002838:	e00e      	b.n	8002858 <HAL_TIM_PWM_Start_DMA+0x12c>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002848:	e006      	b.n	8002858 <HAL_TIM_PWM_Start_DMA+0x12c>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002852:	e001      	b.n	8002858 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e118      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	f200 80ae 	bhi.w	80029bc <HAL_TIM_PWM_Start_DMA+0x290>
 8002860:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	0800289d 	.word	0x0800289d
 800286c:	080029bd 	.word	0x080029bd
 8002870:	080029bd 	.word	0x080029bd
 8002874:	080029bd 	.word	0x080029bd
 8002878:	080028e5 	.word	0x080028e5
 800287c:	080029bd 	.word	0x080029bd
 8002880:	080029bd 	.word	0x080029bd
 8002884:	080029bd 	.word	0x080029bd
 8002888:	0800292d 	.word	0x0800292d
 800288c:	080029bd 	.word	0x080029bd
 8002890:	080029bd 	.word	0x080029bd
 8002894:	080029bd 	.word	0x080029bd
 8002898:	08002975 	.word	0x08002975
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 80028a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	4a7b      	ldr	r2, [pc, #492]	@ (8002a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	4a7a      	ldr	r2, [pc, #488]	@ (8002a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 80028b2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3334      	adds	r3, #52	@ 0x34
 80028c0:	461a      	mov	r2, r3
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	f7fe fc44 	bl	8001150 <HAL_DMA_Start_IT>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0db      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e0:	60da      	str	r2, [r3, #12]
      break;
 80028e2:	e06e      	b.n	80029c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 80028ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	4a69      	ldr	r2, [pc, #420]	@ (8002a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	4a68      	ldr	r2, [pc, #416]	@ (8002a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 80028fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3338      	adds	r3, #56	@ 0x38
 8002908:	461a      	mov	r2, r3
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	f7fe fc20 	bl	8001150 <HAL_DMA_Start_IT>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0b7      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002928:	60da      	str	r2, [r3, #12]
      break;
 800292a:	e04a      	b.n	80029c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002932:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	4a57      	ldr	r2, [pc, #348]	@ (8002a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	4a56      	ldr	r2, [pc, #344]	@ (8002a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 8002942:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	333c      	adds	r3, #60	@ 0x3c
 8002950:	461a      	mov	r2, r3
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	f7fe fbfc 	bl	8001150 <HAL_DMA_Start_IT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e093      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002970:	60da      	str	r2, [r3, #12]
      break;
 8002972:	e026      	b.n	80029c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	4a46      	ldr	r2, [pc, #280]	@ (8002a94 <HAL_TIM_PWM_Start_DMA+0x368>)
 800297a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	4a45      	ldr	r2, [pc, #276]	@ (8002a98 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	4a44      	ldr	r2, [pc, #272]	@ (8002a9c <HAL_TIM_PWM_Start_DMA+0x370>)
 800298a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3340      	adds	r3, #64	@ 0x40
 8002998:	461a      	mov	r2, r3
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	f7fe fbd8 	bl	8001150 <HAL_DMA_Start_IT>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029b8:	60da      	str	r2, [r3, #12]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	75fb      	strb	r3, [r7, #23]
      break;
 80029c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d15f      	bne.n	8002a88 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fea9 	bl	8003728 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a31      	ldr	r2, [pc, #196]	@ (8002aa0 <HAL_TIM_PWM_Start_DMA+0x374>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_PWM_Start_DMA+0x2be>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa4 <HAL_TIM_PWM_Start_DMA+0x378>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_PWM_Start_DMA+0x2c2>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d022      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a16:	d01d      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <HAL_TIM_PWM_Start_DMA+0x380>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d010      	beq.n	8002a88 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	e007      	b.n	8002a88 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	0800302d 	.word	0x0800302d
 8002a98:	080030d5 	.word	0x080030d5
 8002a9c:	08002f9b 	.word	0x08002f9b
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40001800 	.word	0x40001800

08002abc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d855      	bhi.n	8002b7c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002b7d 	.word	0x08002b7d
 8002ae0:	08002b7d 	.word	0x08002b7d
 8002ae4:	08002b7d 	.word	0x08002b7d
 8002ae8:	08002b29 	.word	0x08002b29
 8002aec:	08002b7d 	.word	0x08002b7d
 8002af0:	08002b7d 	.word	0x08002b7d
 8002af4:	08002b7d 	.word	0x08002b7d
 8002af8:	08002b45 	.word	0x08002b45
 8002afc:	08002b7d 	.word	0x08002b7d
 8002b00:	08002b7d 	.word	0x08002b7d
 8002b04:	08002b7d 	.word	0x08002b7d
 8002b08:	08002b61 	.word	0x08002b61
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fb6d 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 8002b26:	e02c      	b.n	8002b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fb5f 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 8002b42:	e01e      	b.n	8002b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fb51 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 8002b5e:	e010      	b.n	8002b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fb43 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d161      	bne.n	8002c4c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fdc9 	bl	8003728 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c58 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_TIM_PWM_Stop_DMA+0xee>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c5c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_PWM_Stop_DMA+0xf2>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d017      	beq.n	8002be4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	f240 4344 	movw	r3, #1092	@ 0x444
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002be2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10f      	bne.n	8002c14 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	f240 4344 	movw	r3, #1092	@ 0x444
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <HAL_TIM_PWM_Stop_DMA+0x168>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c22:	e013      	b.n	8002c4c <HAL_TIM_PWM_Stop_DMA+0x190>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d104      	bne.n	8002c34 <HAL_TIM_PWM_Stop_DMA+0x178>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c32:	e00b      	b.n	8002c4c <HAL_TIM_PWM_Stop_DMA+0x190>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d104      	bne.n	8002c44 <HAL_TIM_PWM_Stop_DMA+0x188>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c42:	e003      	b.n	8002c4c <HAL_TIM_PWM_Stop_DMA+0x190>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40010400 	.word	0x40010400

08002c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0ae      	b.n	8002ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	f200 809f 	bhi.w	8002dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002dcd 	.word	0x08002dcd
 8002c9c:	08002dcd 	.word	0x08002dcd
 8002ca0:	08002dcd 	.word	0x08002dcd
 8002ca4:	08002d09 	.word	0x08002d09
 8002ca8:	08002dcd 	.word	0x08002dcd
 8002cac:	08002dcd 	.word	0x08002dcd
 8002cb0:	08002dcd 	.word	0x08002dcd
 8002cb4:	08002d4b 	.word	0x08002d4b
 8002cb8:	08002dcd 	.word	0x08002dcd
 8002cbc:	08002dcd 	.word	0x08002dcd
 8002cc0:	08002dcd 	.word	0x08002dcd
 8002cc4:	08002d8b 	.word	0x08002d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fae0 	bl	8003294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6999      	ldr	r1, [r3, #24]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	619a      	str	r2, [r3, #24]
      break;
 8002d06:	e064      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fb30 	bl	8003374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	619a      	str	r2, [r3, #24]
      break;
 8002d48:	e043      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fb85 	bl	8003460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0208 	orr.w	r2, r2, #8
 8002d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0204 	bic.w	r2, r2, #4
 8002d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
      break;
 8002d88:	e023      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fbd9 	bl	8003548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69d9      	ldr	r1, [r3, #28]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	021a      	lsls	r2, r3, #8
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	61da      	str	r2, [r3, #28]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIM_ConfigClockSource+0x1c>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e0b4      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x186>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e38:	d03e      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e3e:	f200 8087 	bhi.w	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e46:	f000 8086 	beq.w	8002f56 <HAL_TIM_ConfigClockSource+0x172>
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4e:	d87f      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b70      	cmp	r3, #112	@ 0x70
 8002e52:	d01a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xa6>
 8002e54:	2b70      	cmp	r3, #112	@ 0x70
 8002e56:	d87b      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b60      	cmp	r3, #96	@ 0x60
 8002e5a:	d050      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x11a>
 8002e5c:	2b60      	cmp	r3, #96	@ 0x60
 8002e5e:	d877      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b50      	cmp	r3, #80	@ 0x50
 8002e62:	d03c      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0xfa>
 8002e64:	2b50      	cmp	r3, #80	@ 0x50
 8002e66:	d873      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b40      	cmp	r3, #64	@ 0x40
 8002e6a:	d058      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x13a>
 8002e6c:	2b40      	cmp	r3, #64	@ 0x40
 8002e6e:	d86f      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b30      	cmp	r3, #48	@ 0x30
 8002e72:	d064      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e74:	2b30      	cmp	r3, #48	@ 0x30
 8002e76:	d86b      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d060      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d867      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05c      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d05a      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	e062      	b.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e9a:	f000 fc25 	bl	80036e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	609a      	str	r2, [r3, #8]
      break;
 8002eb6:	e04f      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ec8:	f000 fc0e 	bl	80036e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eda:	609a      	str	r2, [r3, #8]
      break;
 8002edc:	e03c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 fb82 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2150      	movs	r1, #80	@ 0x50
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fbdb 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e02c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 fba1 	bl	8003652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2160      	movs	r1, #96	@ 0x60
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fbcb 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e01c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f000 fb62 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2140      	movs	r1, #64	@ 0x40
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fbbb 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002f3c:	e00c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 fbb2 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      break;
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d107      	bne.n	8002fc2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc0:	e02a      	b.n	8003018 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fda:	e01d      	b.n	8003018 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d107      	bne.n	8002ff6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ff4:	e010      	b.n	8003018 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d107      	bne.n	8003010 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2208      	movs	r2, #8
 8003004:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800300e:	e003      	b.n	8003018 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ffb4 	bl	8002f86 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d10b      	bne.n	800305c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d136      	bne.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800305a:	e031      	b.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d10b      	bne.n	800307e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d125      	bne.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800307c:	e020      	b.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d10b      	bne.n	80030a0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2204      	movs	r2, #4
 800308c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d114      	bne.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800309e:	e00f      	b.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10a      	bne.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2208      	movs	r2, #8
 80030ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fd fa17 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d103      	bne.n	80030f4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	771a      	strb	r2, [r3, #28]
 80030f2:	e019      	b.n	8003128 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d103      	bne.n	8003106 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2202      	movs	r2, #2
 8003102:	771a      	strb	r2, [r3, #28]
 8003104:	e010      	b.n	8003128 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d103      	bne.n	8003118 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2204      	movs	r2, #4
 8003114:	771a      	strb	r2, [r3, #28]
 8003116:	e007      	b.n	8003128 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d102      	bne.n	8003128 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2208      	movs	r2, #8
 8003126:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff ff22 	bl	8002f72 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a46      	ldr	r2, [pc, #280]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a43      	ldr	r2, [pc, #268]	@ (800326c <TIM_Base_SetConfig+0x130>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a42      	ldr	r2, [pc, #264]	@ (8003270 <TIM_Base_SetConfig+0x134>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a41      	ldr	r2, [pc, #260]	@ (8003274 <TIM_Base_SetConfig+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a40      	ldr	r2, [pc, #256]	@ (8003278 <TIM_Base_SetConfig+0x13c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a35      	ldr	r2, [pc, #212]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319c:	d027      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a32      	ldr	r2, [pc, #200]	@ (800326c <TIM_Base_SetConfig+0x130>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d023      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a31      	ldr	r2, [pc, #196]	@ (8003270 <TIM_Base_SetConfig+0x134>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <TIM_Base_SetConfig+0x138>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003278 <TIM_Base_SetConfig+0x13c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d017      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2e      	ldr	r2, [pc, #184]	@ (800327c <TIM_Base_SetConfig+0x140>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003280 <TIM_Base_SetConfig+0x144>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <TIM_Base_SetConfig+0x148>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003288 <TIM_Base_SetConfig+0x14c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2a      	ldr	r2, [pc, #168]	@ (800328c <TIM_Base_SetConfig+0x150>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a29      	ldr	r2, [pc, #164]	@ (8003290 <TIM_Base_SetConfig+0x154>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a10      	ldr	r2, [pc, #64]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <TIM_Base_SetConfig+0x13c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
  }
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40010400 	.word	0x40010400
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800
 8003288:	40001800 	.word	0x40001800
 800328c:	40001c00 	.word	0x40001c00
 8003290:	40002000 	.word	0x40002000

08003294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f023 0201 	bic.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 0302 	bic.w	r3, r3, #2
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a20      	ldr	r2, [pc, #128]	@ (800336c <TIM_OC1_SetConfig+0xd8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_OC1_SetConfig+0x64>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003370 <TIM_OC1_SetConfig+0xdc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0308 	bic.w	r3, r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	@ (800336c <TIM_OC1_SetConfig+0xd8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC1_SetConfig+0x8e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a14      	ldr	r2, [pc, #80]	@ (8003370 <TIM_OC1_SetConfig+0xdc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40010000 	.word	0x40010000
 8003370:	40010400 	.word	0x40010400

08003374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 0210 	bic.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0320 	bic.w	r3, r3, #32
 80033be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a22      	ldr	r2, [pc, #136]	@ (8003458 <TIM_OC2_SetConfig+0xe4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_OC2_SetConfig+0x68>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a21      	ldr	r2, [pc, #132]	@ (800345c <TIM_OC2_SetConfig+0xe8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10d      	bne.n	80033f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a17      	ldr	r2, [pc, #92]	@ (8003458 <TIM_OC2_SetConfig+0xe4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC2_SetConfig+0x94>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a16      	ldr	r2, [pc, #88]	@ (800345c <TIM_OC2_SetConfig+0xe8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d113      	bne.n	8003430 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800340e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a21      	ldr	r2, [pc, #132]	@ (8003540 <TIM_OC3_SetConfig+0xe0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC3_SetConfig+0x66>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a20      	ldr	r2, [pc, #128]	@ (8003544 <TIM_OC3_SetConfig+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a16      	ldr	r2, [pc, #88]	@ (8003540 <TIM_OC3_SetConfig+0xe0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC3_SetConfig+0x92>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a15      	ldr	r2, [pc, #84]	@ (8003544 <TIM_OC3_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d113      	bne.n	800351a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40010000 	.word	0x40010000
 8003544:	40010400 	.word	0x40010400

08003548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a12      	ldr	r2, [pc, #72]	@ (80035ec <TIM_OC4_SetConfig+0xa4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_OC4_SetConfig+0x68>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a11      	ldr	r2, [pc, #68]	@ (80035f0 <TIM_OC4_SetConfig+0xa8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d109      	bne.n	80035c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40010400 	.word	0x40010400

080035f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003652:	b480      	push	{r7}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 0210 	bic.w	r2, r3, #16
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2201      	movs	r2, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	43db      	mvns	r3, r3
 800374a:	401a      	ands	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e05a      	b.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d8:	d01d      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1d      	ldr	r2, [pc, #116]	@ (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1a      	ldr	r2, [pc, #104]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a18      	ldr	r2, [pc, #96]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a17      	ldr	r2, [pc, #92]	@ (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10c      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4313      	orrs	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40010000 	.word	0x40010000
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40010400 	.word	0x40010400
 8003864:	40014000 	.word	0x40014000
 8003868:	40001800 	.word	0x40001800

0800386c <memset>:
 800386c:	4402      	add	r2, r0
 800386e:	4603      	mov	r3, r0
 8003870:	4293      	cmp	r3, r2
 8003872:	d100      	bne.n	8003876 <memset+0xa>
 8003874:	4770      	bx	lr
 8003876:	f803 1b01 	strb.w	r1, [r3], #1
 800387a:	e7f9      	b.n	8003870 <memset+0x4>

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4d0d      	ldr	r5, [pc, #52]	@ (80038b4 <__libc_init_array+0x38>)
 8003880:	4c0d      	ldr	r4, [pc, #52]	@ (80038b8 <__libc_init_array+0x3c>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	2600      	movs	r6, #0
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	4d0b      	ldr	r5, [pc, #44]	@ (80038bc <__libc_init_array+0x40>)
 800388e:	4c0c      	ldr	r4, [pc, #48]	@ (80038c0 <__libc_init_array+0x44>)
 8003890:	f000 f818 	bl	80038c4 <_init>
 8003894:	1b64      	subs	r4, r4, r5
 8003896:	10a4      	asrs	r4, r4, #2
 8003898:	2600      	movs	r6, #0
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	080038fc 	.word	0x080038fc
 80038b8:	080038fc 	.word	0x080038fc
 80038bc:	080038fc 	.word	0x080038fc
 80038c0:	08003900 	.word	0x08003900

080038c4 <_init>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr

080038d0 <_fini>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr
