
LightsaberFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043ec  080043ec  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  000070bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00005404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  000070bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004410  08004410  00005410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000010bc  20000000  08004414  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200010bc  080054d0  000070bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  080054d0  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be16  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f99  00000000  00000000  00012f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00014ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000938  00000000  00000000  00015a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021261  00000000  00000000  000163d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db70  00000000  00000000  00037631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc536  00000000  00000000  000451a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001116d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  0011171c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00114904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200010bc 	.word	0x200010bc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080043d4 	.word	0x080043d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200010c0 	.word	0x200010c0
 8000200:	080043d4 	.word	0x080043d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f002 ff42 	bl	8003388 <HAL_TIM_PWM_Stop_DMA>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a1b      	ldr	r2, [pc, #108]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d12e      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x6e>
		if (play) {
 800051c:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d01d      	beq.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, swing[soundIndex]);
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a19      	ldr	r2, [pc, #100]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	2208      	movs	r2, #8
 800052e:	2100      	movs	r1, #0
 8000530:	4818      	ldr	r0, [pc, #96]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000532:	f000 ffe5 	bl	8001500 <HAL_DAC_SetValue>
			soundIndex++;
 8000536:	4b15      	ldr	r3, [pc, #84]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800053e:	6013      	str	r3, [r2, #0]
			if (soundIndex >= 4272) {
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f241 02af 	movw	r2, #4271	@ 0x10af
 8000548:	4293      	cmp	r3, r2
 800054a:	dd16      	ble.n	800057a <HAL_TIM_PeriodElapsedCallback+0x6e>
				soundIndex = 0;
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
				play = 0;
 8000552:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
				rep = 1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
				rep = 0;
			}

		}
	}
}
 800055e:	e00c      	b.n	800057a <HAL_TIM_PeriodElapsedCallback+0x6e>
			if (rep) {
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d008      	beq.n	800057a <HAL_TIM_PeriodElapsedCallback+0x6e>
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000568:	2300      	movs	r3, #0
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	4809      	ldr	r0, [pc, #36]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000570:	f000 ffc6 	bl	8001500 <HAL_DAC_SetValue>
				rep = 0;
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000117c 	.word	0x2000117c
 8000588:	20001228 	.word	0x20001228
 800058c:	20001224 	.word	0x20001224
 8000590:	20000000 	.word	0x20000000
 8000594:	200010d8 	.word	0x200010d8
 8000598:	2000122c 	.word	0x2000122c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	f6ad 3de8 	subw	sp, sp, #3048	@ 0xbe8
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fd5a 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f960 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fb0c 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 faea 	bl	8000b88 <MX_DMA_Init>
  MX_DAC_Init();
 80005b4:	f000 f9ba 	bl	800092c <MX_DAC_Init>
  MX_TIM2_Init();
 80005b8:	f000 f9e2 	bl	8000980 <MX_TIM2_Init>
  MX_TIM6_Init();
 80005bc:	f000 faae 	bl	8000b1c <MX_TIM6_Init>
  MX_TIM5_Init();
 80005c0:	f000 fa52 	bl	8000a68 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  int nextLightTime = 100;
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	f8c7 3be4 	str.w	r3, [r7, #3044]	@ 0xbe4
  enum STATE currentState = STARTUP;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f887 3be3 	strb.w	r3, [r7, #3043]	@ 0xbe3
  int prevButton = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 3bdc 	str.w	r3, [r7, #3036]	@ 0xbdc
  int offTime;
  int litPixels = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3bd4 	str.w	r3, [r7, #3028]	@ 0xbd4
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005dc:	2100      	movs	r1, #0
 80005de:	489d      	ldr	r0, [pc, #628]	@ (8000854 <main+0x2b8>)
 80005e0:	f000 fee1 	bl	80013a6 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80005e4:	489c      	ldr	r0, [pc, #624]	@ (8000858 <main+0x2bc>)
 80005e6:	f002 fb7f 	bl	8002ce8 <HAL_TIM_Base_Start_IT>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80005ea:	2300      	movs	r3, #0
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	4898      	ldr	r0, [pc, #608]	@ (8000854 <main+0x2b8>)
 80005f2:	f000 ff85 	bl	8001500 <HAL_DAC_SetValue>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80005f6:	210c      	movs	r1, #12
 80005f8:	4898      	ldr	r0, [pc, #608]	@ (800085c <main+0x2c0>)
 80005fa:	f002 fc35 	bl	8002e68 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int currentButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005fe:	2101      	movs	r1, #1
 8000600:	4897      	ldr	r0, [pc, #604]	@ (8000860 <main+0x2c4>)
 8000602:	f001 fd3b 	bl	800207c <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	f8c7 3bc4 	str.w	r3, [r7, #3012]	@ 0xbc4
	  int lightTime = HAL_GetTick();
 800060c:	f000 fd8c 	bl	8001128 <HAL_GetTick>
 8000610:	4603      	mov	r3, r0
 8000612:	f8c7 3bc0 	str.w	r3, [r7, #3008]	@ 0xbc0

	  switch(currentState) {
 8000616:	f897 3be3 	ldrb.w	r3, [r7, #3043]	@ 0xbe3
 800061a:	2b02      	cmp	r3, #2
 800061c:	d02d      	beq.n	800067a <main+0xde>
 800061e:	2b02      	cmp	r3, #2
 8000620:	dc45      	bgt.n	80006ae <main+0x112>
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <main+0x90>
 8000626:	2b01      	cmp	r3, #1
 8000628:	d013      	beq.n	8000652 <main+0xb6>
 800062a:	e040      	b.n	80006ae <main+0x112>
	  case STARTUP:
		  if (!currentButton) {
 800062c:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <main+0x9e>
			  currentState = LIGHT;
 8000634:	2301      	movs	r3, #1
 8000636:	f887 3be3 	strb.w	r3, [r7, #3043]	@ 0xbe3
		  }
		  play = 1;
 800063a:	4b8a      	ldr	r3, [pc, #552]	@ (8000864 <main+0x2c8>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
		  litPixels = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 3bd4 	str.w	r3, [r7, #3028]	@ 0xbd4
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 900);
 8000646:	4b85      	ldr	r3, [pc, #532]	@ (800085c <main+0x2c0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800064e:	641a      	str	r2, [r3, #64]	@ 0x40

		  break;
 8000650:	e032      	b.n	80006b8 <main+0x11c>
	  case LIGHT:
		  if (!currentButton && prevButton) {
 8000652:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10a      	bne.n	8000670 <main+0xd4>
 800065a:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	@ 0xbdc
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <main+0xd4>
			  currentState = OFF;
 8000662:	2302      	movs	r3, #2
 8000664:	f887 3be3 	strb.w	r3, [r7, #3043]	@ 0xbe3
			  offTime = lightTime;
 8000668:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 800066c:	f8c7 3bd8 	str.w	r3, [r7, #3032]	@ 0xbd8
		  }
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8000670:	4b7a      	ldr	r3, [pc, #488]	@ (800085c <main+0x2c0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2200      	movs	r2, #0
 8000676:	641a      	str	r2, [r3, #64]	@ 0x40

		  break;
 8000678:	e01e      	b.n	80006b8 <main+0x11c>
	  case OFF:
		  if (lightTime - offTime > 5000) {
 800067a:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 800067e:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	@ 0xbd8
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000688:	4293      	cmp	r3, r2
 800068a:	dd04      	ble.n	8000696 <main+0xfa>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2104      	movs	r1, #4
 8000690:	4873      	ldr	r0, [pc, #460]	@ (8000860 <main+0x2c4>)
 8000692:	f001 fd0b 	bl	80020ac <HAL_GPIO_WritePin>
		  }
		  if (!currentButton && prevButton) {
 8000696:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10b      	bne.n	80006b6 <main+0x11a>
 800069e:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	@ 0xbdc
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d007      	beq.n	80006b6 <main+0x11a>
			  currentState = LIGHT;
 80006a6:	2301      	movs	r3, #1
 80006a8:	f887 3be3 	strb.w	r3, [r7, #3043]	@ 0xbe3
		  }
		  break;
 80006ac:	e003      	b.n	80006b6 <main+0x11a>
	  default:
		  currentState = LIGHT;
 80006ae:	2301      	movs	r3, #1
 80006b0:	f887 3be3 	strb.w	r3, [r7, #3043]	@ 0xbe3
 80006b4:	e000      	b.n	80006b8 <main+0x11c>
		  break;
 80006b6:	bf00      	nop

	  }
	  if (lightTime >= nextLightTime) {
 80006b8:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 80006bc:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	@ 0xbe4
 80006c0:	429a      	cmp	r2, r3
 80006c2:	f2c0 80c2 	blt.w	800084a <main+0x2ae>
		  nextLightTime = lightTime + 100;
 80006c6:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 80006ca:	3364      	adds	r3, #100	@ 0x64
 80006cc:	f8c7 3be4 	str.w	r3, [r7, #3044]	@ 0xbe4
		  if (currentState != OFF) {
 80006d0:	f897 3be3 	ldrb.w	r3, [r7, #3043]	@ 0xbe3
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d00c      	beq.n	80006f2 <main+0x156>
			  litPixels += 5;
 80006d8:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 80006dc:	3305      	adds	r3, #5
 80006de:	f8c7 3bd4 	str.w	r3, [r7, #3028]	@ 0xbd4
			  if (litPixels > NUM_PIXELS) {
 80006e2:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 80006e6:	2b1e      	cmp	r3, #30
 80006e8:	dd0f      	ble.n	800070a <main+0x16e>
				  litPixels = NUM_PIXELS;
 80006ea:	231e      	movs	r3, #30
 80006ec:	f8c7 3bd4 	str.w	r3, [r7, #3028]	@ 0xbd4
 80006f0:	e00b      	b.n	800070a <main+0x16e>
			  }
		  }
		  else {
			  litPixels -= 5;
 80006f2:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 80006f6:	3b05      	subs	r3, #5
 80006f8:	f8c7 3bd4 	str.w	r3, [r7, #3028]	@ 0xbd4
			  if (litPixels < 0) {
 80006fc:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 8000700:	2b00      	cmp	r3, #0
 8000702:	da02      	bge.n	800070a <main+0x16e>
				  litPixels = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 3bd4 	str.w	r3, [r7, #3028]	@ 0xbd4
			  }
		  }
		  for (int i = 0; i < NUM_PIXELS; i++) {
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 3bd0 	str.w	r3, [r7, #3024]	@ 0xbd0
 8000710:	e041      	b.n	8000796 <main+0x1fa>
//			  else {
//				  pixels[i].color.g = 0;
//				  pixels[i].color.r = 0;
//				  pixels[i].color.b = 0;
//			  }
			  if (i <= litPixels) {
 8000712:	f8d7 2bd0 	ldr.w	r2, [r7, #3024]	@ 0xbd0
 8000716:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 800071a:	429a      	cmp	r2, r3
 800071c:	dc1b      	bgt.n	8000756 <main+0x1ba>
				  pixels[i].color.g = 0;
 800071e:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 8000728:	443b      	add	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	f803 2c9e 	strb.w	r2, [r3, #-158]
				  pixels[i].color.r = 50;
 8000730:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 800073a:	443b      	add	r3, r7
 800073c:	2232      	movs	r2, #50	@ 0x32
 800073e:	f803 2c9f 	strb.w	r2, [r3, #-159]
				  pixels[i].color.b = 0;
 8000742:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 800074c:	443b      	add	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	f803 2ca0 	strb.w	r2, [r3, #-160]
 8000754:	e01a      	b.n	800078c <main+0x1f0>
			  }
			  else {
				  pixels[i].color.g = 0;
 8000756:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 8000760:	443b      	add	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	f803 2c9e 	strb.w	r2, [r3, #-158]
				  pixels[i].color.r = 0;
 8000768:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 8000772:	443b      	add	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	f803 2c9f 	strb.w	r2, [r3, #-159]
				  pixels[i].color.b = 0;
 800077a:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 8000784:	443b      	add	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	f803 2ca0 	strb.w	r2, [r3, #-160]
		  for (int i = 0; i < NUM_PIXELS; i++) {
 800078c:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 8000790:	3301      	adds	r3, #1
 8000792:	f8c7 3bd0 	str.w	r3, [r7, #3024]	@ 0xbd0
 8000796:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 800079a:	2b1d      	cmp	r3, #29
 800079c:	ddb9      	ble.n	8000712 <main+0x176>
			  }

		  }

		  for (int i = 0; i < NUM_PIXELS; i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3bcc 	str.w	r3, [r7, #3020]	@ 0xbcc
 80007a4:	e046      	b.n	8000834 <main+0x298>
			  for (int j = 0; j < 24; j++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 3bc8 	str.w	r3, [r7, #3016]	@ 0xbc8
 80007ac:	e039      	b.n	8000822 <main+0x286>
				  if (((pixels[i].data) >> (23 - j)) & 0x01) {
 80007ae:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 80007b8:	443b      	add	r3, r7
 80007ba:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80007be:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 80007c2:	f1c3 0317 	rsb	r3, r3, #23
 80007c6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d011      	beq.n	80007f6 <main+0x25a>
					  dmaBuff[i * 24 + j] = NEOPIXEL_ONE;
 80007d2:	f8d7 2bcc 	ldr.w	r2, [r7, #3020]	@ 0xbcc
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	461a      	mov	r2, r3
 80007e0:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 80007e4:	441a      	add	r2, r3
 80007e6:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 80007ea:	f6a3 33e4 	subw	r3, r3, #3044	@ 0xbe4
 80007ee:	210a      	movs	r1, #10
 80007f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80007f4:	e010      	b.n	8000818 <main+0x27c>
				  }
				  else {
					  dmaBuff[i * 24 + j] = NEOPIXEL_ZERO;
 80007f6:	f8d7 2bcc 	ldr.w	r2, [r7, #3020]	@ 0xbcc
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	461a      	mov	r2, r3
 8000804:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8000808:	441a      	add	r2, r3
 800080a:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 800080e:	f6a3 33e4 	subw	r3, r3, #3044	@ 0xbe4
 8000812:	2105      	movs	r1, #5
 8000814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  for (int j = 0; j < 24; j++) {
 8000818:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 800081c:	3301      	adds	r3, #1
 800081e:	f8c7 3bc8 	str.w	r3, [r7, #3016]	@ 0xbc8
 8000822:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8000826:	2b17      	cmp	r3, #23
 8000828:	ddc1      	ble.n	80007ae <main+0x212>
		  for (int i = 0; i < NUM_PIXELS; i++) {
 800082a:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 800082e:	3301      	adds	r3, #1
 8000830:	f8c7 3bcc 	str.w	r3, [r7, #3020]	@ 0xbcc
 8000834:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 8000838:	2b1d      	cmp	r3, #29
 800083a:	ddb4      	ble.n	80007a6 <main+0x20a>
				  }
			  }
		  }
		  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, dmaBuff, DMA_BUFF_SIZE);
 800083c:	1d3a      	adds	r2, r7, #4
 800083e:	f240 23d1 	movw	r3, #721	@ 0x2d1
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <main+0x2cc>)
 8000846:	f002 fbd7 	bl	8002ff8 <HAL_TIM_PWM_Start_DMA>
	  }
	  prevButton = currentButton;
 800084a:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 800084e:	f8c7 3bdc 	str.w	r3, [r7, #3036]	@ 0xbdc
  {
 8000852:	e6d4      	b.n	80005fe <main+0x62>
 8000854:	200010d8 	.word	0x200010d8
 8000858:	2000117c 	.word	0x2000117c
 800085c:	20001134 	.word	0x20001134
 8000860:	40020000 	.word	0x40020000
 8000864:	20001228 	.word	0x20001228
 8000868:	200010ec 	.word	0x200010ec

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2234      	movs	r2, #52	@ 0x34
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fd7e 	bl	800437c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <SystemClock_Config+0xb8>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <SystemClock_Config+0xb8>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <SystemClock_Config+0xb8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <SystemClock_Config+0xbc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <SystemClock_Config+0xbc>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <SystemClock_Config+0xbc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 ff13 	bl	800270c <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008ec:	f000 f9c8 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fbe8 	bl	80020e0 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000916:	f000 f9b3 	bl	8000c80 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	@ 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_DAC_Init+0x4c>)
 800093c:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <MX_DAC_Init+0x50>)
 800093e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_DAC_Init+0x4c>)
 8000942:	f000 fd0e 	bl	8001362 <HAL_DAC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800094c:	f000 f998 	bl	8000c80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000950:	2300      	movs	r3, #0
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <MX_DAC_Init+0x4c>)
 8000960:	f000 fe02 	bl	8001568 <HAL_DAC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800096a:	f000 f989 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200010d8 	.word	0x200010d8
 800097c:	40007400 	.word	0x40007400

08000980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	@ 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 80009c4:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009c6:	2213      	movs	r2, #19
 80009c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d6:	4823      	ldr	r0, [pc, #140]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009d8:	f002 f936 	bl	8002c48 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009e2:	f000 f94d 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481c      	ldr	r0, [pc, #112]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 80009f4:	f002 ff4c 	bl	8003890 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009fe:	f000 f93f 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a02:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 8000a04:	f002 f9e0 	bl	8002dc8 <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a0e:	f000 f937 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 8000a22:	f003 fc1b 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a2c:	f000 f928 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a30:	2360      	movs	r3, #96	@ 0x60
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 8000a48:	f002 fe60 	bl	800370c <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a52:	f000 f915 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a56:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <MX_TIM2_Init+0xe4>)
 8000a58:	f000 fa1e 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000a5c:	bf00      	nop
 8000a5e:	3738      	adds	r7, #56	@ 0x38
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200010ec 	.word	0x200010ec

08000a68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000a8c:	4a22      	ldr	r2, [pc, #136]	@ (8000b18 <MX_TIM5_Init+0xb0>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a90:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000 - 1;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000a9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ab0:	4818      	ldr	r0, [pc, #96]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000ab2:	f002 f989 	bl	8002dc8 <HAL_TIM_PWM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f8e0 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4619      	mov	r1, r3
 8000ace:	4811      	ldr	r0, [pc, #68]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000ad0:	f003 fbc4 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000ada:	f000 f8d1 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ade:	2360      	movs	r3, #96	@ 0x60
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	220c      	movs	r2, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000af6:	f002 fe09 	bl	800370c <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000b00:	f000 f8be 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <MX_TIM5_Init+0xac>)
 8000b06:	f000 f9c7 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20001134 	.word	0x20001134
 8000b18:	40000c00 	.word	0x40000c00

08000b1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b2c:	4a15      	ldr	r2, [pc, #84]	@ (8000b84 <MX_TIM6_Init+0x68>)
 8000b2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000 - 1;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b3e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000b42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b4c:	f002 f87c 	bl	8002c48 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b56:	f000 f893 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <MX_TIM6_Init+0x64>)
 8000b68:	f003 fb78 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b72:	f000 f885 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000117c 	.word	0x2000117c
 8000b84:	40001000 	.word	0x40001000

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_DMA_Init+0x3c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <MX_DMA_Init+0x3c>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_DMA_Init+0x3c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2010      	movs	r0, #16
 8000bb0:	f000 fba1 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bb4:	2010      	movs	r0, #16
 8000bb6:	f000 fbba 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a24      	ldr	r2, [pc, #144]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a16      	ldr	r2, [pc, #88]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_GPIO_Init+0xb0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2104      	movs	r1, #4
 8000c36:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <MX_GPIO_Init+0xb4>)
 8000c38:	f001 fa38 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <MX_GPIO_Init+0xb4>)
 8000c50:	f001 f880 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c54:	2304      	movs	r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_GPIO_Init+0xb4>)
 8000c6c:	f001 f872 	bl	8001d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <HAL_DAC_MspInit+0x8c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12f      	bne.n	8000d5e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_DAC_MspInit+0x90>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_DAC_MspInit+0x90>)
 8000d08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HAL_DAC_MspInit+0x90>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <HAL_DAC_MspInit+0x90>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <HAL_DAC_MspInit+0x90>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_DAC_MspInit+0x90>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d36:	2310      	movs	r3, #16
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <HAL_DAC_MspInit+0x94>)
 8000d4a:	f001 f803 	bl	8001d54 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2036      	movs	r0, #54	@ 0x36
 8000d54:	f000 facf 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d58:	2036      	movs	r0, #54	@ 0x36
 8000d5a:	f000 fae8 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	@ 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40007400 	.word	0x40007400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d84:	d13f      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <HAL_TIM_Base_MspInit+0xd0>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e44 <HAL_TIM_Base_MspInit+0xd0>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <HAL_TIM_Base_MspInit+0xd0>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000da2:	4b29      	ldr	r3, [pc, #164]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000da4:	4a29      	ldr	r2, [pc, #164]	@ (8000e4c <HAL_TIM_Base_MspInit+0xd8>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000daa:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000dae:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db0:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000db2:	2240      	movs	r2, #64	@ 0x40
 8000db4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db6:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000dbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000dc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dca:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000dce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dd2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000ddc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000de8:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000dea:	f000 fc21 	bl	8001630 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000df4:	f7ff ff44 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <HAL_TIM_Base_MspInit+0xd4>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e04:	e01a      	b.n	8000e3c <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <HAL_TIM_Base_MspInit+0xdc>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d115      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_TIM_Base_MspInit+0xd0>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <HAL_TIM_Base_MspInit+0xd0>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <HAL_TIM_Base_MspInit+0xd0>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2036      	movs	r0, #54	@ 0x36
 8000e32:	f000 fa60 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e36:	2036      	movs	r0, #54	@ 0x36
 8000e38:	f000 fa79 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	200011c4 	.word	0x200011c4
 8000e4c:	40026088 	.word	0x40026088
 8000e50:	40001000 	.word	0x40001000

08000e54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10d      	bne.n	8000e82 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x40>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x40>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x40>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40000c00 	.word	0x40000c00
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eb8:	d11e      	bne.n	8000ef8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a21      	ldr	r2, [pc, #132]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4816      	ldr	r0, [pc, #88]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000ef2:	f000 ff2f 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000ef6:	e022      	b.n	8000f3e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <HAL_TIM_MspPostInit+0xb8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11d      	bne.n	8000f3e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000f3a:	f000 ff0b 	bl	8001d54 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	@ 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40000c00 	.word	0x40000c00

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 f8a9 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <DMA1_Stream5_IRQHandler+0x10>)
 8000fba:	f000 fc61 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200011c4 	.word	0x200011c4

08000fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <TIM6_DAC_IRQHandler+0x14>)
 8000fce:	f000 fa41 	bl	8001454 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000fd2:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <TIM6_DAC_IRQHandler+0x18>)
 8000fd4:	f002 faaa 	bl	800352c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200010d8 	.word	0x200010d8
 8000fe0:	2000117c 	.word	0x2000117c

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001036:	f003 f9a9 	bl	800438c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff faaf 	bl	800059c <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	200010bc 	.word	0x200010bc
  ldr r2, =_sidata
 800104c:	08004414 	.word	0x08004414
  ldr r2, =_sbss
 8001050:	200010bc 	.word	0x200010bc
  ldr r4, =_ebss
 8001054:	20001234 	.word	0x20001234

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f92b 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fdfc 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f943 	bl	800134a <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010dc:	f000 f90b 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200010b0 	.word	0x200010b0
 80010f8:	200010b8 	.word	0x200010b8
 80010fc:	200010b4 	.word	0x200010b4

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200010b8 	.word	0x200010b8
 8001124:	20001230 	.word	0x20001230

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20001230 	.word	0x20001230

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e014      	b.n	800139e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fca9 	bl	8000cdc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e046      	b.n	8001448 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <HAL_DAC_Start+0x20>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e040      	b.n	8001448 <HAL_DAC_Start+0xa2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6819      	ldr	r1, [r3, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10f      	bne.n	8001410 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80013fa:	2b3c      	cmp	r3, #60	@ 0x3c
 80013fc:	d11d      	bne.n	800143a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e014      	b.n	800143a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	213c      	movs	r1, #60	@ 0x3c
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	429a      	cmp	r2, r3
 8001428:	d107      	bne.n	800143a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0202 	orr.w	r2, r2, #2
 8001438:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01d      	beq.n	80014b2 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d018      	beq.n	80014b2 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f851 	bl	8001554 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01d      	beq.n	80014f8 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d018      	beq.n	80014f8 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	f043 0202 	orr.w	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80014f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f891 	bl	800161a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e015      	b.n	8001548 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	3308      	adds	r3, #8
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e004      	b.n	800153e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	3314      	adds	r3, #20
 800153c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	461a      	mov	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	@ 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <HAL_DAC_ConfigChannel+0x1c>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e042      	b.n	800160e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	795b      	ldrb	r3, [r3, #5]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_DAC_ConfigChannel+0x2c>
 8001590:	2302      	movs	r3, #2
 8001592:	e03c      	b.n	800160e <HAL_DAC_ConfigChannel+0xa6>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2202      	movs	r2, #2
 800159e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	22c0      	movs	r2, #192	@ 0xc0
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800160c:	7ffb      	ldrb	r3, [r7, #31]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fd74 	bl	8001128 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e099      	b.n	8001780 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166c:	e00f      	b.n	800168e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166e:	f7ff fd5b 	bl	8001128 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b05      	cmp	r3, #5
 800167a:	d908      	bls.n	800168e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e078      	b.n	8001780 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e8      	bne.n	800166e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <HAL_DMA_Init+0x158>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d107      	bne.n	80016f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4313      	orrs	r3, r2
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f023 0307 	bic.w	r3, r3, #7
 800170e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	2b04      	cmp	r3, #4
 8001720:	d117      	bne.n	8001752 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4313      	orrs	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00e      	beq.n	8001752 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fa91 	bl	8001c5c <DMA_CheckFifoParam>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2240      	movs	r2, #64	@ 0x40
 8001744:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800174e:	2301      	movs	r3, #1
 8001750:	e016      	b.n	8001780 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa48 	bl	8001bf0 <DMA_CalcBaseAndBitshift>
 8001760:	4603      	mov	r3, r0
 8001762:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001768:	223f      	movs	r2, #63	@ 0x3f
 800176a:	409a      	lsls	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	f010803f 	.word	0xf010803f

0800178c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_DMA_Start_IT+0x26>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e040      	b.n	8001834 <HAL_DMA_Start_IT+0xa8>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d12f      	bne.n	8001826 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f9da 	bl	8001b94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e4:	223f      	movs	r2, #63	@ 0x3f
 80017e6:	409a      	lsls	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0216 	orr.w	r2, r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e005      	b.n	8001832 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800182e:	2302      	movs	r3, #2
 8001830:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001832:	7dfb      	ldrb	r3, [r7, #23]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d004      	beq.n	800185a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2280      	movs	r2, #128	@ 0x80
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00c      	b.n	8001874 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2205      	movs	r2, #5
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800188c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac8 <HAL_DMA_IRQHandler+0x248>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a8e      	ldr	r2, [pc, #568]	@ (8001acc <HAL_DMA_IRQHandler+0x24c>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0a9b      	lsrs	r3, r3, #10
 8001898:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018aa:	2208      	movs	r2, #8
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0204 	bic.w	r2, r2, #4
 80018d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	2208      	movs	r2, #8
 80018da:	409a      	lsls	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	2201      	movs	r2, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d012      	beq.n	8001922 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190e:	2201      	movs	r2, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	f043 0202 	orr.w	r2, r3, #2
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001926:	2204      	movs	r2, #4
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d012      	beq.n	8001958 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00b      	beq.n	8001958 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001944:	2204      	movs	r2, #4
 8001946:	409a      	lsls	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001950:	f043 0204 	orr.w	r2, r3, #4
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195c:	2210      	movs	r2, #16
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d043      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03c      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197a:	2210      	movs	r2, #16
 800197c:	409a      	lsls	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d018      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d108      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d024      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
 80019ae:	e01f      	b.n	80019f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01b      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
 80019c0:	e016      	b.n	80019f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0208 	bic.w	r2, r2, #8
 80019de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	2220      	movs	r2, #32
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 808f 	beq.w	8001b20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8087 	beq.w	8001b20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	2220      	movs	r2, #32
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d136      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0216 	bic.w	r2, r2, #22
 8001a38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <HAL_DMA_IRQHandler+0x1da>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0208 	bic.w	r2, r2, #8
 8001a68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	223f      	movs	r2, #63	@ 0x3f
 8001a70:	409a      	lsls	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d07e      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
        }
        return;
 8001a96:	e079      	b.n	8001b8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01d      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10d      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
 8001ac4:	e02c      	b.n	8001b20 <HAL_DMA_IRQHandler+0x2a0>
 8001ac6:	bf00      	nop
 8001ac8:	200010b0 	.word	0x200010b0
 8001acc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e01e      	b.n	8001b20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10f      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0210 	bic.w	r2, r2, #16
 8001afe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d032      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d022      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2205      	movs	r2, #5
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d307      	bcc.n	8001b68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f2      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x2cc>
 8001b66:	e000      	b.n	8001b6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
 8001b8a:	e000      	b.n	8001b8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b8c:	bf00      	nop
    }
  }
}
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b40      	cmp	r3, #64	@ 0x40
 8001bc0:	d108      	bne.n	8001bd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bd2:	e007      	b.n	8001be4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	60da      	str	r2, [r3, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3b10      	subs	r3, #16
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <DMA_CalcBaseAndBitshift+0x64>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c0a:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <DMA_CalcBaseAndBitshift+0x68>)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d909      	bls.n	8001c32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	1d1a      	adds	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c30:	e007      	b.n	8001c42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	aaaaaaab 	.word	0xaaaaaaab
 8001c58:	080043fc 	.word	0x080043fc

08001c5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11f      	bne.n	8001cb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d856      	bhi.n	8001d2a <DMA_CheckFifoParam+0xce>
 8001c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c84 <DMA_CheckFifoParam+0x28>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001ca7 	.word	0x08001ca7
 8001c8c:	08001c95 	.word	0x08001c95
 8001c90:	08001d2b 	.word	0x08001d2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d046      	beq.n	8001d2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca4:	e043      	b.n	8001d2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cae:	d140      	bne.n	8001d32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb4:	e03d      	b.n	8001d32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cbe:	d121      	bne.n	8001d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d837      	bhi.n	8001d36 <DMA_CheckFifoParam+0xda>
 8001cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ccc <DMA_CheckFifoParam+0x70>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001ce3 	.word	0x08001ce3
 8001cd4:	08001cdd 	.word	0x08001cdd
 8001cd8:	08001cf5 	.word	0x08001cf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce0:	e030      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d025      	beq.n	8001d3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf2:	e022      	b.n	8001d3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cfc:	d11f      	bne.n	8001d3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d02:	e01c      	b.n	8001d3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d903      	bls.n	8001d12 <DMA_CheckFifoParam+0xb6>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d10:	e018      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
      break;
 8001d16:	e015      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00e      	beq.n	8001d42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      break;
 8001d28:	e00b      	b.n	8001d42 <DMA_CheckFifoParam+0xe6>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e00a      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e008      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
 8001d34:	e006      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
 8001d38:	e004      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
 8001d3c:	e002      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d3e:	bf00      	nop
 8001d40:	e000      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
    }
  } 
  
  return status; 
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e165      	b.n	800203c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8154 	bne.w	8002036 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80ae 	beq.w	8002036 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b5d      	ldr	r3, [pc, #372]	@ (8002054 <HAL_GPIO_Init+0x300>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	@ (8002054 <HAL_GPIO_Init+0x300>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b5a      	ldr	r3, [pc, #360]	@ (8002054 <HAL_GPIO_Init+0x300>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a58      	ldr	r2, [pc, #352]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800205c <HAL_GPIO_Init+0x308>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4e      	ldr	r2, [pc, #312]	@ (8002060 <HAL_GPIO_Init+0x30c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x216>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002064 <HAL_GPIO_Init+0x310>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x212>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	@ (8002068 <HAL_GPIO_Init+0x314>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x20e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800206c <HAL_GPIO_Init+0x318>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x20a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	@ (8002070 <HAL_GPIO_Init+0x31c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x206>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a49      	ldr	r2, [pc, #292]	@ (8002074 <HAL_GPIO_Init+0x320>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x202>
 8001f52:	2306      	movs	r3, #6
 8001f54:	e00c      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e00a      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e008      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f62:	2303      	movs	r3, #3
 8001f64:	e004      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	f002 0203 	and.w	r2, r2, #3
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f80:	4935      	ldr	r1, [pc, #212]	@ (8002058 <HAL_GPIO_Init+0x304>)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb2:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fdc:	4a26      	ldr	r2, [pc, #152]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe2:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_GPIO_Init+0x324>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002030:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <HAL_GPIO_Init+0x324>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3301      	adds	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	f67f ae96 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40013800 	.word	0x40013800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40021400 	.word	0x40021400
 8002074:	40021800 	.word	0x40021800
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e001      	b.n	800209e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0cc      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b68      	ldr	r3, [pc, #416]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d90c      	bls.n	800211c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a58      	ldr	r2, [pc, #352]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800213e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d044      	beq.n	8002200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d119      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	2b03      	cmp	r3, #3
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e067      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b37      	ldr	r3, [pc, #220]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4934      	ldr	r1, [pc, #208]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d0:	f7fe ffaa 	bl	8001128 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe ffa6 	bl	8001128 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d20c      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe ff0a 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	080043ec 	.word	0x080043ec
 80022a4:	200010b0 	.word	0x200010b0
 80022a8:	200010b4 	.word	0x200010b4

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b0:	b0ae      	sub	sp, #184	@ 0xb8
 80022b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d2:	4bcb      	ldr	r3, [pc, #812]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	f200 8206 	bhi.w	80026ec <HAL_RCC_GetSysClockFreq+0x440>
 80022e0:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	0800231d 	.word	0x0800231d
 80022ec:	080026ed 	.word	0x080026ed
 80022f0:	080026ed 	.word	0x080026ed
 80022f4:	080026ed 	.word	0x080026ed
 80022f8:	08002325 	.word	0x08002325
 80022fc:	080026ed 	.word	0x080026ed
 8002300:	080026ed 	.word	0x080026ed
 8002304:	080026ed 	.word	0x080026ed
 8002308:	0800232d 	.word	0x0800232d
 800230c:	080026ed 	.word	0x080026ed
 8002310:	080026ed 	.word	0x080026ed
 8002314:	080026ed 	.word	0x080026ed
 8002318:	0800251d 	.word	0x0800251d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4bb9      	ldr	r3, [pc, #740]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x358>)
 800231e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002322:	e1e7      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4bb8      	ldr	r3, [pc, #736]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002326:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800232a:	e1e3      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800232c:	4bb4      	ldr	r3, [pc, #720]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002334:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002338:	4bb1      	ldr	r3, [pc, #708]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d071      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002344:	4bae      	ldr	r3, [pc, #696]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002350:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	0159      	lsls	r1, r3, #5
 8002378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237c:	0150      	lsls	r0, r2, #5
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4621      	mov	r1, r4
 8002384:	1a51      	subs	r1, r2, r1
 8002386:	6439      	str	r1, [r7, #64]	@ 0x40
 8002388:	4629      	mov	r1, r5
 800238a:	eb63 0301 	sbc.w	r3, r3, r1
 800238e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800239c:	4649      	mov	r1, r9
 800239e:	018b      	lsls	r3, r1, #6
 80023a0:	4641      	mov	r1, r8
 80023a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a6:	4641      	mov	r1, r8
 80023a8:	018a      	lsls	r2, r1, #6
 80023aa:	4641      	mov	r1, r8
 80023ac:	1a51      	subs	r1, r2, r1
 80023ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023b0:	4649      	mov	r1, r9
 80023b2:	eb63 0301 	sbc.w	r3, r3, r1
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023c4:	4649      	mov	r1, r9
 80023c6:	00cb      	lsls	r3, r1, #3
 80023c8:	4641      	mov	r1, r8
 80023ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ce:	4641      	mov	r1, r8
 80023d0:	00ca      	lsls	r2, r1, #3
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	4622      	mov	r2, r4
 80023da:	189b      	adds	r3, r3, r2
 80023dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023de:	462b      	mov	r3, r5
 80023e0:	460a      	mov	r2, r1
 80023e2:	eb42 0303 	adc.w	r3, r2, r3
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f4:	4629      	mov	r1, r5
 80023f6:	024b      	lsls	r3, r1, #9
 80023f8:	4621      	mov	r1, r4
 80023fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023fe:	4621      	mov	r1, r4
 8002400:	024a      	lsls	r2, r1, #9
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002414:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002418:	f7fd fef4 	bl	8000204 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4613      	mov	r3, r2
 8002422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002426:	e067      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002428:	4b75      	ldr	r3, [pc, #468]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	2200      	movs	r2, #0
 8002430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002434:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800243c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002442:	2300      	movs	r3, #0
 8002444:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002446:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800244a:	4622      	mov	r2, r4
 800244c:	462b      	mov	r3, r5
 800244e:	f04f 0000 	mov.w	r0, #0
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	0159      	lsls	r1, r3, #5
 8002458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245c:	0150      	lsls	r0, r2, #5
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4621      	mov	r1, r4
 8002464:	1a51      	subs	r1, r2, r1
 8002466:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002468:	4629      	mov	r1, r5
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800247c:	4649      	mov	r1, r9
 800247e:	018b      	lsls	r3, r1, #6
 8002480:	4641      	mov	r1, r8
 8002482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002486:	4641      	mov	r1, r8
 8002488:	018a      	lsls	r2, r1, #6
 800248a:	4641      	mov	r1, r8
 800248c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002490:	4649      	mov	r1, r9
 8002492:	eb63 0b01 	sbc.w	fp, r3, r1
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024aa:	4692      	mov	sl, r2
 80024ac:	469b      	mov	fp, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	eb1a 0303 	adds.w	r3, sl, r3
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	462b      	mov	r3, r5
 80024b8:	eb4b 0303 	adc.w	r3, fp, r3
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ca:	4629      	mov	r1, r5
 80024cc:	028b      	lsls	r3, r1, #10
 80024ce:	4621      	mov	r1, r4
 80024d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d4:	4621      	mov	r1, r4
 80024d6:	028a      	lsls	r2, r1, #10
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024e0:	2200      	movs	r2, #0
 80024e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80024e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024ea:	f7fd fe8b 	bl	8000204 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4613      	mov	r3, r2
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800250a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800250e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800251a:	e0eb      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d06b      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002534:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	2200      	movs	r2, #0
 800253c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800253e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002540:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002546:	663b      	str	r3, [r7, #96]	@ 0x60
 8002548:	2300      	movs	r3, #0
 800254a:	667b      	str	r3, [r7, #100]	@ 0x64
 800254c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002550:	4622      	mov	r2, r4
 8002552:	462b      	mov	r3, r5
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	0159      	lsls	r1, r3, #5
 800255e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002562:	0150      	lsls	r0, r2, #5
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4621      	mov	r1, r4
 800256a:	1a51      	subs	r1, r2, r1
 800256c:	61b9      	str	r1, [r7, #24]
 800256e:	4629      	mov	r1, r5
 8002570:	eb63 0301 	sbc.w	r3, r3, r1
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002582:	4659      	mov	r1, fp
 8002584:	018b      	lsls	r3, r1, #6
 8002586:	4651      	mov	r1, sl
 8002588:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258c:	4651      	mov	r1, sl
 800258e:	018a      	lsls	r2, r1, #6
 8002590:	4651      	mov	r1, sl
 8002592:	ebb2 0801 	subs.w	r8, r2, r1
 8002596:	4659      	mov	r1, fp
 8002598:	eb63 0901 	sbc.w	r9, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025b0:	4690      	mov	r8, r2
 80025b2:	4699      	mov	r9, r3
 80025b4:	4623      	mov	r3, r4
 80025b6:	eb18 0303 	adds.w	r3, r8, r3
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	462b      	mov	r3, r5
 80025be:	eb49 0303 	adc.w	r3, r9, r3
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025d0:	4629      	mov	r1, r5
 80025d2:	024b      	lsls	r3, r1, #9
 80025d4:	4621      	mov	r1, r4
 80025d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025da:	4621      	mov	r1, r4
 80025dc:	024a      	lsls	r2, r1, #9
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e6:	2200      	movs	r2, #0
 80025e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025f0:	f7fd fe08 	bl	8000204 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4613      	mov	r3, r2
 80025fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025fe:	e065      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x420>
 8002600:	40023800 	.word	0x40023800
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260c:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x458>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	2200      	movs	r2, #0
 8002614:	4618      	mov	r0, r3
 8002616:	4611      	mov	r1, r2
 8002618:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800261c:	653b      	str	r3, [r7, #80]	@ 0x50
 800261e:	2300      	movs	r3, #0
 8002620:	657b      	str	r3, [r7, #84]	@ 0x54
 8002622:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002626:	4642      	mov	r2, r8
 8002628:	464b      	mov	r3, r9
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	0159      	lsls	r1, r3, #5
 8002634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002638:	0150      	lsls	r0, r2, #5
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4641      	mov	r1, r8
 8002640:	1a51      	subs	r1, r2, r1
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	4649      	mov	r1, r9
 8002646:	eb63 0301 	sbc.w	r3, r3, r1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002658:	4659      	mov	r1, fp
 800265a:	018b      	lsls	r3, r1, #6
 800265c:	4651      	mov	r1, sl
 800265e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002662:	4651      	mov	r1, sl
 8002664:	018a      	lsls	r2, r1, #6
 8002666:	4651      	mov	r1, sl
 8002668:	1a54      	subs	r4, r2, r1
 800266a:	4659      	mov	r1, fp
 800266c:	eb63 0501 	sbc.w	r5, r3, r1
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	00eb      	lsls	r3, r5, #3
 800267a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267e:	00e2      	lsls	r2, r4, #3
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
 8002684:	4643      	mov	r3, r8
 8002686:	18e3      	adds	r3, r4, r3
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	464b      	mov	r3, r9
 800268c:	eb45 0303 	adc.w	r3, r5, r3
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269e:	4629      	mov	r1, r5
 80026a0:	028b      	lsls	r3, r1, #10
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a8:	4621      	mov	r1, r4
 80026aa:	028a      	lsls	r2, r1, #10
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b4:	2200      	movs	r2, #0
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026be:	f7fd fda1 	bl	8000204 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4613      	mov	r3, r2
 80026c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0f1b      	lsrs	r3, r3, #28
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80026da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ea:	e003      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	37b8      	adds	r7, #184	@ 0xb8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	00f42400 	.word	0x00f42400

0800270c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e28d      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8083 	beq.w	8002832 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800272c:	4b94      	ldr	r3, [pc, #592]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d019      	beq.n	800276c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002738:	4b91      	ldr	r3, [pc, #580]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002740:	2b08      	cmp	r3, #8
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002744:	4b8e      	ldr	r3, [pc, #568]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002750:	d00c      	beq.n	800276c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b8b      	ldr	r3, [pc, #556]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d112      	bne.n	8002784 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b88      	ldr	r3, [pc, #544]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b84      	ldr	r3, [pc, #528]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x124>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e25a      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x90>
 800278e:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7b      	ldr	r2, [pc, #492]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xcc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xb4>
 80027a6:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b73      	ldr	r3, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a72      	ldr	r2, [pc, #456]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xcc>
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fca2 	bl	8001128 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fc9e 	bl	8001128 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e21f      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xdc>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fc8e 	bl	8001128 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fc8a 	bl	8001128 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e20b      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x104>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06f      	beq.n	800291e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800283e:	4b50      	ldr	r3, [pc, #320]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800284a:	4b4d      	ldr	r3, [pc, #308]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002856:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x186>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1d3      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCC_OscConfig+0x278>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fc37 	bl	8001128 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fc33 	bl	8001128 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1b4      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <HAL_RCC_OscConfig+0x278>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fc16 	bl	8001128 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fc12 	bl	8001128 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e193      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fbf6 	bl	8001128 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fbf2 	bl	8001128 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e173      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x234>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_OscConfig+0x27c>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe fbdf 	bl	8001128 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fbdb 	bl	8001128 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e15c      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b79      	ldr	r3, [pc, #484]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b76      	ldr	r3, [pc, #472]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fb9b 	bl	8001128 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe fb97 	bl	8001128 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e118      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6c      	ldr	r3, [pc, #432]	@ (8002bbc <HAL_RCC_OscConfig+0x4b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x31e>
 8002a1c:	4b66      	ldr	r3, [pc, #408]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	4a65      	ldr	r2, [pc, #404]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x358>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x340>
 8002a32:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a60      	ldr	r2, [pc, #384]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x358>
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a59      	ldr	r2, [pc, #356]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	4b57      	ldr	r3, [pc, #348]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a56      	ldr	r2, [pc, #344]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fb5c 	bl	8001128 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fb58 	bl	8001128 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0d7      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x368>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fb46 	bl	8001128 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fb42 	bl	8001128 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0c1      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ad 	beq.w	8002c38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b36      	ldr	r3, [pc, #216]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d060      	beq.n	8002bac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d145      	bne.n	8002b7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fb16 	bl	8001128 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fb12 	bl	8001128 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e093      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	491b      	ldr	r1, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fae7 	bl	8001128 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fae3 	bl	8001128 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e064      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b70:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x452>
 8002b7c:	e05c      	b.n	8002c38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fad0 	bl	8001128 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe facc 	bl	8001128 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04d      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x480>
 8002baa:	e045      	b.n	8002c38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e040      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <HAL_RCC_OscConfig+0x538>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d129      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d122      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d119      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10f      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f880 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 ffcc 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d001      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04e      	b.n	8002d9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <HAL_TIM_Base_Start_IT+0xc4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d022      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2a:	d01d      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a19      	ldr	r2, [pc, #100]	@ (8002dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x80>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d111      	bne.n	8002d8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d010      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8a:	e007      	b.n	8002d9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40010400 	.word	0x40010400
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40001800 	.word	0x40001800

08002dc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e041      	b.n	8002e5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe f830 	bl	8000e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 ff0c 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x24>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e022      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d109      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x3e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e015      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d109      	bne.n	8002ec0 <HAL_TIM_PWM_Start+0x58>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e07c      	b.n	8002fd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0x82>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0x92>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f08:	e003      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2201      	movs	r2, #1
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f978 	bl	8004210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2d      	ldr	r2, [pc, #180]	@ (8002fdc <HAL_TIM_PWM_Start+0x174>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_PWM_Start+0xcc>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <HAL_TIM_PWM_Start+0x178>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_TIM_PWM_Start+0xd0>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_TIM_PWM_Start+0xd2>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_TIM_PWM_Start+0x174>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f60:	d01d      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_TIM_PWM_Start+0x17c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe8 <HAL_TIM_PWM_Start+0x180>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_TIM_PWM_Start+0x184>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <HAL_TIM_PWM_Start+0x178>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ff0 <HAL_TIM_PWM_Start+0x188>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x136>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <HAL_TIM_PWM_Start+0x18c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d111      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d010      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc0:	e007      	b.n	8002fd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40010400 	.word	0x40010400
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40001800 	.word	0x40001800

08002ff8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e022      	b.n	800306a <HAL_TIM_PWM_Start_DMA+0x72>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d109      	bne.n	800303e <HAL_TIM_PWM_Start_DMA+0x46>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e015      	b.n	800306a <HAL_TIM_PWM_Start_DMA+0x72>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d109      	bne.n	8003058 <HAL_TIM_PWM_Start_DMA+0x60>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e008      	b.n	800306a <HAL_TIM_PWM_Start_DMA+0x72>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e171      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_TIM_PWM_Start_DMA+0x94>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e022      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0xda>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d109      	bne.n	80030a6 <HAL_TIM_PWM_Start_DMA+0xae>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e015      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e008      	b.n	80030d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d024      	beq.n	8003120 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_TIM_PWM_Start_DMA+0xea>
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e137      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f4:	e016      	b.n	8003124 <HAL_TIM_PWM_Start_DMA+0x12c>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start_DMA+0x10e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003104:	e00e      	b.n	8003124 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start_DMA+0x11e>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003114:	e006      	b.n	8003124 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800311e:	e001      	b.n	8003124 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e118      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	f200 80ae 	bhi.w	8003288 <HAL_TIM_PWM_Start_DMA+0x290>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003169 	.word	0x08003169
 8003138:	08003289 	.word	0x08003289
 800313c:	08003289 	.word	0x08003289
 8003140:	08003289 	.word	0x08003289
 8003144:	080031b1 	.word	0x080031b1
 8003148:	08003289 	.word	0x08003289
 800314c:	08003289 	.word	0x08003289
 8003150:	08003289 	.word	0x08003289
 8003154:	080031f9 	.word	0x080031f9
 8003158:	08003289 	.word	0x08003289
 800315c:	08003289 	.word	0x08003289
 8003160:	08003289 	.word	0x08003289
 8003164:	08003241 	.word	0x08003241
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	4a7c      	ldr	r2, [pc, #496]	@ (8003360 <HAL_TIM_PWM_Start_DMA+0x368>)
 800316e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	4a7b      	ldr	r2, [pc, #492]	@ (8003364 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	4a7a      	ldr	r2, [pc, #488]	@ (8003368 <HAL_TIM_PWM_Start_DMA+0x370>)
 800317e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3334      	adds	r3, #52	@ 0x34
 800318c:	461a      	mov	r2, r3
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	f7fe fafc 	bl	800178c <HAL_DMA_Start_IT>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0db      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ac:	60da      	str	r2, [r3, #12]
      break;
 80031ae:	e06e      	b.n	800328e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003360 <HAL_TIM_PWM_Start_DMA+0x368>)
 80031b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	4a69      	ldr	r2, [pc, #420]	@ (8003364 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	4a68      	ldr	r2, [pc, #416]	@ (8003368 <HAL_TIM_PWM_Start_DMA+0x370>)
 80031c6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3338      	adds	r3, #56	@ 0x38
 80031d4:	461a      	mov	r2, r3
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	f7fe fad8 	bl	800178c <HAL_DMA_Start_IT>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0b7      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031f4:	60da      	str	r2, [r3, #12]
      break;
 80031f6:	e04a      	b.n	800328e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	4a58      	ldr	r2, [pc, #352]	@ (8003360 <HAL_TIM_PWM_Start_DMA+0x368>)
 80031fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	4a57      	ldr	r2, [pc, #348]	@ (8003364 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	4a56      	ldr	r2, [pc, #344]	@ (8003368 <HAL_TIM_PWM_Start_DMA+0x370>)
 800320e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	333c      	adds	r3, #60	@ 0x3c
 800321c:	461a      	mov	r2, r3
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	f7fe fab4 	bl	800178c <HAL_DMA_Start_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e093      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800323c:	60da      	str	r2, [r3, #12]
      break;
 800323e:	e026      	b.n	800328e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	4a46      	ldr	r2, [pc, #280]	@ (8003360 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003246:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	4a45      	ldr	r2, [pc, #276]	@ (8003364 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	4a44      	ldr	r2, [pc, #272]	@ (8003368 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003256:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3340      	adds	r3, #64	@ 0x40
 8003264:	461a      	mov	r2, r3
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	f7fe fa90 	bl	800178c <HAL_DMA_Start_IT>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e06f      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003284:	60da      	str	r2, [r3, #12]
      break;
 8003286:	e002      	b.n	800328e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	bf00      	nop
  }

  if (status == HAL_OK)
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d15f      	bne.n	8003354 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 ffb7 	bl	8004210 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a31      	ldr	r2, [pc, #196]	@ (800336c <HAL_TIM_PWM_Start_DMA+0x374>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIM_PWM_Start_DMA+0x2be>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003370 <HAL_TIM_PWM_Start_DMA+0x378>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_PWM_Start_DMA+0x2c2>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a25      	ldr	r2, [pc, #148]	@ (800336c <HAL_TIM_PWM_Start_DMA+0x374>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e2:	d01d      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a22      	ldr	r2, [pc, #136]	@ (8003374 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a21      	ldr	r2, [pc, #132]	@ (8003378 <HAL_TIM_PWM_Start_DMA+0x380>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1f      	ldr	r2, [pc, #124]	@ (800337c <HAL_TIM_PWM_Start_DMA+0x384>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1a      	ldr	r2, [pc, #104]	@ (8003370 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x328>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d111      	bne.n	8003344 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d010      	beq.n	8003354 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	e007      	b.n	8003354 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003354:	7dfb      	ldrb	r3, [r7, #23]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	08003b15 	.word	0x08003b15
 8003364:	08003bbd 	.word	0x08003bbd
 8003368:	08003a83 	.word	0x08003a83
 800336c:	40010000 	.word	0x40010000
 8003370:	40010400 	.word	0x40010400
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000
 8003384:	40001800 	.word	0x40001800

08003388 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b0c      	cmp	r3, #12
 800339a:	d855      	bhi.n	8003448 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800339c:	a201      	add	r2, pc, #4	@ (adr r2, 80033a4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033d9 	.word	0x080033d9
 80033a8:	08003449 	.word	0x08003449
 80033ac:	08003449 	.word	0x08003449
 80033b0:	08003449 	.word	0x08003449
 80033b4:	080033f5 	.word	0x080033f5
 80033b8:	08003449 	.word	0x08003449
 80033bc:	08003449 	.word	0x08003449
 80033c0:	08003449 	.word	0x08003449
 80033c4:	08003411 	.word	0x08003411
 80033c8:	08003449 	.word	0x08003449
 80033cc:	08003449 	.word	0x08003449
 80033d0:	08003449 	.word	0x08003449
 80033d4:	0800342d 	.word	0x0800342d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fa25 	bl	800183c <HAL_DMA_Abort_IT>
      break;
 80033f2:	e02c      	b.n	800344e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003402:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fa17 	bl	800183c <HAL_DMA_Abort_IT>
      break;
 800340e:	e01e      	b.n	800344e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fa09 	bl	800183c <HAL_DMA_Abort_IT>
      break;
 800342a:	e010      	b.n	800344e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800343a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe f9fb 	bl	800183c <HAL_DMA_Abort_IT>
      break;
 8003446:	e002      	b.n	800344e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	bf00      	nop
  }

  if (status == HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d161      	bne.n	8003518 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2200      	movs	r2, #0
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fed7 	bl	8004210 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_TIM_PWM_Stop_DMA+0xee>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2d      	ldr	r2, [pc, #180]	@ (8003528 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_TIM_PWM_Stop_DMA+0xf4>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d017      	beq.n	80034b0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	f241 1311 	movw	r3, #4369	@ 0x1111
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	f240 4344 	movw	r3, #1092	@ 0x444
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_PWM_Stop_DMA+0x128>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10f      	bne.n	80034e0 <HAL_TIM_PWM_Stop_DMA+0x158>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_PWM_Stop_DMA+0x158>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_TIM_PWM_Stop_DMA+0x168>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ee:	e013      	b.n	8003518 <HAL_TIM_PWM_Stop_DMA+0x190>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d104      	bne.n	8003500 <HAL_TIM_PWM_Stop_DMA+0x178>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034fe:	e00b      	b.n	8003518 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d104      	bne.n	8003510 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800350e:	e003      	b.n	8003518 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0202 	mvn.w	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa5b 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa4d 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fc ffb5 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d020      	beq.n	80035dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0204 	mvn.w	r2, #4
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa35 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa27 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fc ff8f 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d020      	beq.n	8003628 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0208 	mvn.w	r2, #8
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa0f 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa01 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fc ff69 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0210 	mvn.w	r2, #16
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2208      	movs	r2, #8
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9e9 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9db 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fc ff43 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00c      	beq.n	8003698 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0201 	mvn.w	r2, #1
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fc ff3a 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fe56 	bl	8004368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9bd 	bl	8003a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0220 	mvn.w	r2, #32
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fe28 	bl	8004354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003726:	2302      	movs	r3, #2
 8003728:	e0ae      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	f200 809f 	bhi.w	8003878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373a:	a201      	add	r2, pc, #4	@ (adr r2, 8003740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	08003775 	.word	0x08003775
 8003744:	08003879 	.word	0x08003879
 8003748:	08003879 	.word	0x08003879
 800374c:	08003879 	.word	0x08003879
 8003750:	080037b5 	.word	0x080037b5
 8003754:	08003879 	.word	0x08003879
 8003758:	08003879 	.word	0x08003879
 800375c:	08003879 	.word	0x08003879
 8003760:	080037f7 	.word	0x080037f7
 8003764:	08003879 	.word	0x08003879
 8003768:	08003879 	.word	0x08003879
 800376c:	08003879 	.word	0x08003879
 8003770:	08003837 	.word	0x08003837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fafe 	bl	8003d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
      break;
 80037b2:	e064      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fb4e 	bl	8003e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
      break;
 80037f4:	e043      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fba3 	bl	8003f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0208 	orr.w	r2, r2, #8
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
      break;
 8003834:	e023      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fbf7 	bl	8004030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	021a      	lsls	r2, r3, #8
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]
      break;
 8003876:	e002      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_ConfigClockSource+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0b4      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x186>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e4:	d03e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xd4>
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ea:	f200 8087 	bhi.w	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f2:	f000 8086 	beq.w	8003a02 <HAL_TIM_ConfigClockSource+0x172>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d87f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b70      	cmp	r3, #112	@ 0x70
 80038fe:	d01a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xa6>
 8003900:	2b70      	cmp	r3, #112	@ 0x70
 8003902:	d87b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b60      	cmp	r3, #96	@ 0x60
 8003906:	d050      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x11a>
 8003908:	2b60      	cmp	r3, #96	@ 0x60
 800390a:	d877      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b50      	cmp	r3, #80	@ 0x50
 800390e:	d03c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xfa>
 8003910:	2b50      	cmp	r3, #80	@ 0x50
 8003912:	d873      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d058      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x13a>
 8003918:	2b40      	cmp	r3, #64	@ 0x40
 800391a:	d86f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b30      	cmp	r3, #48	@ 0x30
 800391e:	d064      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b30      	cmp	r3, #48	@ 0x30
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d867      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d05a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	e062      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003946:	f000 fc43 	bl	80041d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
      break;
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 fc2c 	bl	80041d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fba0 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	@ 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fbf9 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fbbf 	bl	800413a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	@ 0x60
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fbe9 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fb80 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fbd9 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fbd0 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d107      	bne.n	8003aaa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aa8:	e02a      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac2:	e01d      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d107      	bne.n	8003ade <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003adc:	e010      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2208      	movs	r2, #8
 8003aec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003af6:	e003      	b.n	8003b00 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff ffb4 	bl	8003a6e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d10b      	bne.n	8003b44 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d136      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b42:	e031      	b.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d10b      	bne.n	8003b66 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2202      	movs	r2, #2
 8003b52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d125      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b64:	e020      	b.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d10b      	bne.n	8003b88 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2204      	movs	r2, #4
 8003b74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d114      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b86:	e00f      	b.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10a      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2208      	movs	r2, #8
 8003b96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7fc fca3 	bl	80004f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d103      	bne.n	8003bdc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	771a      	strb	r2, [r3, #28]
 8003bda:	e019      	b.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d103      	bne.n	8003bee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2202      	movs	r2, #2
 8003bea:	771a      	strb	r2, [r3, #28]
 8003bec:	e010      	b.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d103      	bne.n	8003c00 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	771a      	strb	r2, [r3, #28]
 8003bfe:	e007      	b.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d102      	bne.n	8003c10 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff18 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a46      	ldr	r2, [pc, #280]	@ (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a43      	ldr	r2, [pc, #268]	@ (8003d54 <TIM_Base_SetConfig+0x130>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <TIM_Base_SetConfig+0x134>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a41      	ldr	r2, [pc, #260]	@ (8003d5c <TIM_Base_SetConfig+0x138>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a40      	ldr	r2, [pc, #256]	@ (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a35      	ldr	r2, [pc, #212]	@ (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c84:	d027      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <TIM_Base_SetConfig+0x130>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d023      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a31      	ldr	r2, [pc, #196]	@ (8003d58 <TIM_Base_SetConfig+0x134>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01f      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a30      	ldr	r2, [pc, #192]	@ (8003d5c <TIM_Base_SetConfig+0x138>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d017      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8003d64 <TIM_Base_SetConfig+0x140>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <TIM_Base_SetConfig+0x144>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d6c <TIM_Base_SetConfig+0x148>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d70 <TIM_Base_SetConfig+0x14c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <TIM_Base_SetConfig+0x150>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	@ (8003d78 <TIM_Base_SetConfig+0x154>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a10      	ldr	r2, [pc, #64]	@ (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a12      	ldr	r2, [pc, #72]	@ (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d103      	bne.n	8003d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	611a      	str	r2, [r3, #16]
  }
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800
 8003d70:	40001800 	.word	0x40001800
 8003d74:	40001c00 	.word	0x40001c00
 8003d78:	40002000 	.word	0x40002000

08003d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 0201 	bic.w	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <TIM_OC1_SetConfig+0xd8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC1_SetConfig+0x64>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a1f      	ldr	r2, [pc, #124]	@ (8003e58 <TIM_OC1_SetConfig+0xdc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10c      	bne.n	8003dfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0308 	bic.w	r3, r3, #8
 8003de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a15      	ldr	r2, [pc, #84]	@ (8003e54 <TIM_OC1_SetConfig+0xd8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_OC1_SetConfig+0x8e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <TIM_OC1_SetConfig+0xdc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010400 	.word	0x40010400

08003e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f023 0210 	bic.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <TIM_OC2_SetConfig+0xe4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC2_SetConfig+0x68>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <TIM_OC2_SetConfig+0xe8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10d      	bne.n	8003ee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	@ (8003f40 <TIM_OC2_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC2_SetConfig+0x94>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <TIM_OC2_SetConfig+0xe8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d113      	bne.n	8003f18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	621a      	str	r2, [r3, #32]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400

08003f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <TIM_OC3_SetConfig+0xe0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC3_SetConfig+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	@ (800402c <TIM_OC3_SetConfig+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <TIM_OC3_SetConfig+0xe0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC3_SetConfig+0x92>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	@ (800402c <TIM_OC3_SetConfig+0xe4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d113      	bne.n	8004002 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800407a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	031b      	lsls	r3, r3, #12
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a12      	ldr	r2, [pc, #72]	@ (80040d4 <TIM_OC4_SetConfig+0xa4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC4_SetConfig+0x68>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a11      	ldr	r2, [pc, #68]	@ (80040d8 <TIM_OC4_SetConfig+0xa8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d109      	bne.n	80040ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800409e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40010400 	.word	0x40010400

080040dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 030a 	bic.w	r3, r3, #10
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b087      	sub	sp, #28
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 0210 	bic.w	r2, r3, #16
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f043 0307 	orr.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2201      	movs	r2, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e05a      	b.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a21      	ldr	r2, [pc, #132]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d022      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c0:	d01d      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d018      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1a      	ldr	r2, [pc, #104]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a17      	ldr	r2, [pc, #92]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10c      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40010400 	.word	0x40010400
 800434c:	40014000 	.word	0x40014000
 8004350:	40001800 	.word	0x40001800

08004354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <memset>:
 800437c:	4402      	add	r2, r0
 800437e:	4603      	mov	r3, r0
 8004380:	4293      	cmp	r3, r2
 8004382:	d100      	bne.n	8004386 <memset+0xa>
 8004384:	4770      	bx	lr
 8004386:	f803 1b01 	strb.w	r1, [r3], #1
 800438a:	e7f9      	b.n	8004380 <memset+0x4>

0800438c <__libc_init_array>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4d0d      	ldr	r5, [pc, #52]	@ (80043c4 <__libc_init_array+0x38>)
 8004390:	4c0d      	ldr	r4, [pc, #52]	@ (80043c8 <__libc_init_array+0x3c>)
 8004392:	1b64      	subs	r4, r4, r5
 8004394:	10a4      	asrs	r4, r4, #2
 8004396:	2600      	movs	r6, #0
 8004398:	42a6      	cmp	r6, r4
 800439a:	d109      	bne.n	80043b0 <__libc_init_array+0x24>
 800439c:	4d0b      	ldr	r5, [pc, #44]	@ (80043cc <__libc_init_array+0x40>)
 800439e:	4c0c      	ldr	r4, [pc, #48]	@ (80043d0 <__libc_init_array+0x44>)
 80043a0:	f000 f818 	bl	80043d4 <_init>
 80043a4:	1b64      	subs	r4, r4, r5
 80043a6:	10a4      	asrs	r4, r4, #2
 80043a8:	2600      	movs	r6, #0
 80043aa:	42a6      	cmp	r6, r4
 80043ac:	d105      	bne.n	80043ba <__libc_init_array+0x2e>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b4:	4798      	blx	r3
 80043b6:	3601      	adds	r6, #1
 80043b8:	e7ee      	b.n	8004398 <__libc_init_array+0xc>
 80043ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80043be:	4798      	blx	r3
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7f2      	b.n	80043aa <__libc_init_array+0x1e>
 80043c4:	0800440c 	.word	0x0800440c
 80043c8:	0800440c 	.word	0x0800440c
 80043cc:	0800440c 	.word	0x0800440c
 80043d0:	08004410 	.word	0x08004410

080043d4 <_init>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr

080043e0 <_fini>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr
